//API url parameters(0x08), Iridium
// Code generated by omnicom; DO NOT EDIT
package omnicom

import (
	"errors"
	"strconv"
)

type AUP struct {
	Header                        byte
	ID_Msg                        uint32
	Date_Position                 Date_Position
	Web_Service_API_URL_Sending   Web_Service_API_URL_Sending
	Web_Service_API_URL_Receiving Web_Service_API_URL_Receiving
	Array                         Array
	Padding                       uint32
	CRC                           uint32
}

func (AUP *AUP) Parse(input string) error {
	var err error
	if len(input) > 1432 {
		err = errors.New("Input message is longer than limit")
		return err
	}
	var count int = 0
	if count+8 > len(input) {
		err = errors.New("Input message length of AUP is shorter than required")
		return err
	}
	count = count + 8
	var num uint64
	if count+12 > len(input) {
		err = errors.New("Input message length of AUP is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+12], 2, 32)
	AUP.ID_Msg = uint32(num*1 - 0)
	count = count + 12
	if err != nil {
		return err
	}
	if count+70 > len(input) {
		err = errors.New("Input message length of AUP is shorter than required")
		return err
	}
	AUP.Date_Position = *new(Date_Position)
	err = AUP.Date_Position.parse(input[count : count+70])
	count = count + 70
	if err != nil {
		return err
	}
	if count+601 > len(input) {
		err = errors.New("Input message length of AUP is shorter than required")
		return err
	}
	AUP.Web_Service_API_URL_Sending = *new(Web_Service_API_URL_Sending)
	err = AUP.Web_Service_API_URL_Sending.parse(input[count : count+601])
	count = count + 601
	if err != nil {
		return err
	}
	if count+601 > len(input) {
		err = errors.New("Input message length of AUP is shorter than required")
		return err
	}
	AUP.Web_Service_API_URL_Receiving = *new(Web_Service_API_URL_Receiving)
	err = AUP.Web_Service_API_URL_Receiving.parse(input[count : count+601])
	count = count + 601
	if err != nil {
		return err
	}
	if count+129 > len(input) {
		err = errors.New("Input message length of AUP is shorter than required")
		return err
	}
	AUP.Array = *new(Array)
	err = AUP.Array.parse(input[count : count+129])
	count = count + 129
	if err != nil {
		return err
	}
	if count+(8-count%8) > len(input) {
		err = errors.New("Input message length of AUP is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+(8-count%8)], 2, 32)
	AUP.Padding = uint32(num*1 - 0)
	count = count + (8 - count%8)
	if err != nil {
		return err
	}
	if count+8 > len(input) {
		err = errors.New("Input message length of AUP is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+8], 2, 32)
	AUP.CRC = uint32(num*1 - 0)
	count = count + 8
	if err != nil {
		return err
	}
	return err
}
func (AUP *AUP) Encode() ([]byte, error) {
	var str string
	var s string
	var err error
	str += pad(strconv.FormatUint(uint64(AUP.Header), 2), 8)
	s = pad(strconv.FormatUint(uint64((AUP.ID_Msg+0)/1), 2), 12)
	if len(s) > 12 {
		err = errors.New("Value assigned for AUP.ID_Msg exceeds limit")
		return []byte{}, err
	}
	str += s

	s, err = AUP.Date_Position.encode()
	if err != nil {
		return []byte{}, err
	}
	str += s

	s, err = AUP.Web_Service_API_URL_Sending.encode()
	if err != nil {
		return []byte{}, err
	}
	str += s

	s, err = AUP.Web_Service_API_URL_Receiving.encode()
	if err != nil {
		return []byte{}, err
	}
	str += s

	s, err = AUP.Array.encode()
	if err != nil {
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((AUP.Padding+0)/1), 2), 8-len(str)%8)
	if len(s) > (8 - len(str)%8) {
		err = errors.New("Value assigned for AUP.Padding exceeds limit")
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((AUP.CRC+0)/1), 2), 8)
	if len(s) > 8 {
		err = errors.New("Value assigned for AUP.CRC exceeds limit")
		return []byte{}, err
	}
	str += s

	str = attachCRC(str)
	byteList, err := decToByte(str)
	return byteList, err
}
func (AUP *AUP) getHeader() byte {
	return AUP.Header
}
func (AUP *AUP) getCRC() uint32 {
	return AUP.CRC
}
func (AUP *AUP) setCRC(crc uint32) {
	AUP.CRC = crc
}
