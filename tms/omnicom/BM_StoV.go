//Binary message(0x38) from server to vessels, Iridium/3G
// Code generated by omnicom; DO NOT EDIT
package omnicom

import (
	"errors"
	"strconv"
)

type BM_StoV struct {
	Header             byte
	Date               Date
	ID_Msg             uint32
	Length_Msg_Content uint32
	Msg_Content        []byte
	CRC                uint32
}

func (BM_StoV *BM_StoV) Parse(input string) error {
	var err error
	if len(input) > 16777288 {
		err = errors.New("Input message is longer than limit")
		return err
	}
	var count int = 0
	if count+8 > len(input) {
		err = errors.New("Input message length of BM_StoV is shorter than required")
		return err
	}
	count = count + 8
	if count+27 > len(input) {
		err = errors.New("Input message length of BM_StoV is shorter than required")
		return err
	}
	BM_StoV.Date = *new(Date)
	err = BM_StoV.Date.parse(input[count : count+27])
	count = count + 27
	if err != nil {
		return err
	}
	var num uint64
	if count+16 > len(input) {
		err = errors.New("Input message length of BM_StoV is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+16], 2, 32)
	BM_StoV.ID_Msg = uint32(num*1 - 0)
	count = count + 16
	if err != nil {
		return err
	}
	if count+21 > len(input) {
		err = errors.New("Input message length of BM_StoV is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+21], 2, 32)
	BM_StoV.Length_Msg_Content = uint32(num*1 - 0)
	count = count + 21
	if err != nil {
		return err
	}
	if count+int(BM_StoV.Length_Msg_Content)*8 > len(input) {
		err = errors.New("Input message length of BM_StoV is shorter than required")
		return err
	}
	if 16777208 < int(BM_StoV.Length_Msg_Content)*8 {
		err = errors.New("BM_StoV.Length_Msg_Content is larger than limit")
		return err
	}
	BM_StoV.Msg_Content, err = decodeToByte(input[count : count+int(BM_StoV.Length_Msg_Content)*8])
	count = count + int(BM_StoV.Length_Msg_Content)*8
	if err != nil {
		return err
	}
	if count+8 > len(input) {
		err = errors.New("Input message length of BM_StoV is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+8], 2, 32)
	BM_StoV.CRC = uint32(num*1 - 0)
	count = count + 8
	if err != nil {
		return err
	}
	return err
}
func (BM_StoV *BM_StoV) Encode() ([]byte, error) {
	var str string
	var s string
	var err error
	str += pad(strconv.FormatUint(uint64(BM_StoV.Header), 2), 8)
	s, err = BM_StoV.Date.encode()
	if err != nil {
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((BM_StoV.ID_Msg+0)/1), 2), 16)
	if len(s) > 16 {
		err = errors.New("Value assigned for BM_StoV.ID_Msg exceeds limit")
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((BM_StoV.Length_Msg_Content+0)/1), 2), 21)
	if len(s) > 21 {
		err = errors.New("Value assigned for BM_StoV.Length_Msg_Content exceeds limit")
		return []byte{}, err
	}
	str += s

	if 16777208 < int(BM_StoV.Length_Msg_Content)*8 {
		err = errors.New("BM_StoV.Length_Msg_Content is larger than limit")
		return []byte{}, err
	}
	s, err = encodeFromByte(BM_StoV.Msg_Content, int(BM_StoV.Length_Msg_Content)*8)
	if err != nil {
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((BM_StoV.CRC+0)/1), 2), 8)
	if len(s) > 8 {
		err = errors.New("Value assigned for BM_StoV.CRC exceeds limit")
		return []byte{}, err
	}
	str += s

	str = attachCRC(str)
	byteList, err := decToByte(str)
	return byteList, err
}
func (BM_StoV *BM_StoV) getHeader() byte {
	return BM_StoV.Header
}
func (BM_StoV *BM_StoV) getCRC() uint32 {
	return BM_StoV.CRC
}
func (BM_StoV *BM_StoV) setCRC(crc uint32) {
	BM_StoV.CRC = crc
}
