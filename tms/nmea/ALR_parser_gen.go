// Code generated by parse_nmea; DO NOT EDIT
package nmea

import "fmt"
import "strings"
import "strconv"

const (
	// PrefixALR prefix
	PrefixALR = "ALR"
)

// ALR represents fix data.
type CoreALR struct {
	UtcTime float64

	UtcTimeValidity bool

	AlarmId uint32

	AlarmIdValidity bool

	AlarmCondition string

	AlarmConditionValidity bool

	AlarmAck string

	AlarmAckValidity bool

	AlarmDesc string

	AlarmDescValidity bool
}

type ALR struct {
	BaseSentence
	CoreALR
}

func NewALR(sentence BaseSentence) *ALR {
	s := new(ALR)
	s.BaseSentence = sentence

	s.UtcTimeValidity = false

	s.AlarmIdValidity = false

	s.AlarmConditionValidity = false

	s.AlarmAckValidity = false

	s.AlarmDescValidity = false

	return s
}

func (s *ALR) parse() error {
	var err error

	if s.Format != PrefixALR {
		err = fmt.Errorf("%s is not a %s", s.Format, PrefixALR)
		return err
	}

	if len(s.Fields) == 0 {
		return nil
	} else {
		if s.Fields[0] != "" {
			i, err := strconv.ParseFloat(s.Fields[0], 64)
			if err != nil {
				return fmt.Errorf("ALR decode variation error: %s", s.Fields[0])
			} else {
				s.CoreALR.UtcTime = float64(i)
				s.CoreALR.UtcTimeValidity = true
			}

		}
	}

	if len(s.Fields) == 1 {
		return nil
	} else {
		if s.Fields[1] != "" {
			i, err := strconv.ParseUint(s.Fields[1], 10, 32)
			if err != nil {
				return fmt.Errorf("ALR decode variation error: %s", s.Fields[1])
			} else {
				s.CoreALR.AlarmId = uint32(i)
				s.CoreALR.AlarmIdValidity = true
			}

		}
	}

	if len(s.Fields) == 2 {
		return nil
	} else {
		if s.Fields[2] != "" {
			s.AlarmCondition = s.Fields[2]
			s.AlarmConditionValidity = true
		}
	}

	if len(s.Fields) == 3 {
		return nil
	} else {
		if s.Fields[3] != "" {
			s.AlarmAck = s.Fields[3]
			s.AlarmAckValidity = true
		}
	}

	if len(s.Fields) == 4 {
		return nil
	} else {
		if s.Fields[4] != "" {
			s.AlarmDesc = s.Fields[4]
			s.AlarmDescValidity = true
		}
	}

	return nil
}

func (s *ALR) Encode() (string, error) {
	var Raw string

	if s.Format != PrefixALR {
		err := fmt.Errorf("Sentence format %s is not a ALR sentence", s.Format)
		return "", err
	}

	Raw = s.SOS + s.Talker + s.Format

	if s.UtcTimeValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreALR.UtcTime, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreALR.UtcTime, 'f', -1, 64)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.AlarmIdValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreALR.AlarmId), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreALR.AlarmId), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.AlarmConditionValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreALR.AlarmCondition

		} else {
			Raw = Raw + "," + s.CoreALR.AlarmCondition
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.AlarmAckValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreALR.AlarmAck

		} else {
			Raw = Raw + "," + s.CoreALR.AlarmAck
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.AlarmDescValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreALR.AlarmDesc

		} else {
			Raw = Raw + "," + s.CoreALR.AlarmDesc
		}
	}

	check := Checksum(Raw)

	Raw = Raw + check

	return Raw, nil

}
