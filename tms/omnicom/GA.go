//Geofencing ack(0x04), Iridium/3G
// Code generated by omnicom; DO NOT EDIT
package omnicom

import (
	"errors"
	"strconv"
)

type GA struct {
	Header        byte
	Msg_ID        uint32
	Date_Position Date_Position
	Error_Type    uint32
	GEO_ID        uint32
	Padding       uint32
	CRC           uint32
}

func (GA *GA) Parse(input string) error {
	var err error
	if len(input) > 144 {
		err = errors.New("Input message is longer than limit")
		return err
	}
	var count int = 0
	if count+8 > len(input) {
		err = errors.New("Input message length of GA is shorter than required")
		return err
	}
	count = count + 8
	var num uint64
	if count+12 > len(input) {
		err = errors.New("Input message length of GA is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+12], 2, 32)
	GA.Msg_ID = uint32(num*1 - 0)
	count = count + 12
	if err != nil {
		return err
	}
	if count+70 > len(input) {
		err = errors.New("Input message length of GA is shorter than required")
		return err
	}
	GA.Date_Position = *new(Date_Position)
	err = GA.Date_Position.parse(input[count : count+70])
	count = count + 70
	if err != nil {
		return err
	}
	if count+8 > len(input) {
		err = errors.New("Input message length of GA is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+8], 2, 32)
	GA.Error_Type = uint32(num*1 - 0)
	count = count + 8
	if err != nil {
		return err
	}
	if count+32 > len(input) {
		err = errors.New("Input message length of GA is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+32], 2, 32)
	GA.GEO_ID = uint32(num*1 - 0)
	count = count + 32
	if err != nil {
		return err
	}
	if count+(8-count%8) > len(input) {
		err = errors.New("Input message length of GA is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+(8-count%8)], 2, 32)
	GA.Padding = uint32(num*1 - 0)
	count = count + (8 - count%8)
	if err != nil {
		return err
	}
	if count+8 > len(input) {
		err = errors.New("Input message length of GA is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+8], 2, 32)
	GA.CRC = uint32(num*1 - 0)
	count = count + 8
	if err != nil {
		return err
	}
	return err
}
func (GA *GA) Encode() ([]byte, error) {
	var str string
	var s string
	var err error
	str += pad(strconv.FormatUint(uint64(GA.Header), 2), 8)
	s = pad(strconv.FormatUint(uint64((GA.Msg_ID+0)/1), 2), 12)
	if len(s) > 12 {
		err = errors.New("Value assigned for GA.Msg_ID exceeds limit")
		return []byte{}, err
	}
	str += s

	s, err = GA.Date_Position.encode()
	if err != nil {
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((GA.Error_Type+0)/1), 2), 8)
	if len(s) > 8 {
		err = errors.New("Value assigned for GA.Error_Type exceeds limit")
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((GA.GEO_ID+0)/1), 2), 32)
	if len(s) > 32 {
		err = errors.New("Value assigned for GA.GEO_ID exceeds limit")
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((GA.Padding+0)/1), 2), 8-len(str)%8)
	if len(s) > (8 - len(str)%8) {
		err = errors.New("Value assigned for GA.Padding exceeds limit")
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((GA.CRC+0)/1), 2), 8)
	if len(s) > 8 {
		err = errors.New("Value assigned for GA.CRC exceeds limit")
		return []byte{}, err
	}
	str += s

	str = attachCRC(str)
	byteList, err := decToByte(str)
	return byteList, err
}
func (GA *GA) getHeader() byte {
	return GA.Header
}
func (GA *GA) getCRC() uint32 {
	return GA.CRC
}
func (GA *GA) setCRC(crc uint32) {
	GA.CRC = crc
}
