// Code generated by parse_nmea; DO NOT EDIT
package nmea

import "fmt"
import "strings"
import "strconv"

const (
	// PrefixRPC prefix
	PrefixRPC = "RPC"
)

// RPC represents fix data.
type CoreRPC struct {
	ReservedForFutureUse uint32

	ReservedForFutureUseValidity bool

	Profile0Flag uint32

	Profile0FlagValidity bool

	Profile1Flag uint32

	Profile1FlagValidity bool

	Profile2Flag uint32

	Profile2FlagValidity bool

	Profile3Flag uint32

	Profile3FlagValidity bool

	Profile4Flag uint32

	Profile4FlagValidity bool

	Profile5Flag uint32

	Profile5FlagValidity bool

	Profile6Flag uint32

	Profile6FlagValidity bool

	Profile7Flag uint32

	Profile7FlagValidity bool

	Profile8Flag uint32

	Profile8FlagValidity bool

	Profile9Flag uint32

	Profile9FlagValidity bool

	Profile10Flag uint32

	Profile10FlagValidity bool

	Profile11Flag uint32

	Profile11FlagValidity bool

	Profile12Flag uint32

	Profile12FlagValidity bool

	Profile13Flag uint32

	Profile13FlagValidity bool

	Profile14Flag uint32

	Profile14FlagValidity bool

	Profile15Flag uint32

	Profile15FlagValidity bool
}

type RPC struct {
	BaseSentence
	CoreRPC
}

func NewRPC(sentence BaseSentence) *RPC {
	s := new(RPC)
	s.BaseSentence = sentence

	s.ReservedForFutureUseValidity = false

	s.Profile0FlagValidity = false

	s.Profile1FlagValidity = false

	s.Profile2FlagValidity = false

	s.Profile3FlagValidity = false

	s.Profile4FlagValidity = false

	s.Profile5FlagValidity = false

	s.Profile6FlagValidity = false

	s.Profile7FlagValidity = false

	s.Profile8FlagValidity = false

	s.Profile9FlagValidity = false

	s.Profile10FlagValidity = false

	s.Profile11FlagValidity = false

	s.Profile12FlagValidity = false

	s.Profile13FlagValidity = false

	s.Profile14FlagValidity = false

	s.Profile15FlagValidity = false

	return s
}

func (s *RPC) parse() error {
	var err error

	if s.Format != PrefixRPC {
		err = fmt.Errorf("%s is not a %s", s.Format, PrefixRPC)
		return err
	}

	if len(s.Fields) == 0 {
		return nil
	} else {
		if s.Fields[0] != "" {
			i, err := strconv.ParseUint(s.Fields[0], 10, 32)
			if err != nil {
				return fmt.Errorf("RPC decode variation error: %s", s.Fields[0])
			} else {
				s.CoreRPC.ReservedForFutureUse = uint32(i)
				s.CoreRPC.ReservedForFutureUseValidity = true
			}

		}
	}

	if len(s.Fields) == 1 {
		return nil
	} else {
		if s.Fields[1] != "" {
			i, err := strconv.ParseUint(s.Fields[1], 10, 32)
			if err != nil {
				return fmt.Errorf("RPC decode variation error: %s", s.Fields[1])
			} else {
				s.CoreRPC.Profile0Flag = uint32(i)
				s.CoreRPC.Profile0FlagValidity = true
			}

		}
	}

	if len(s.Fields) == 2 {
		return nil
	} else {
		if s.Fields[2] != "" {
			i, err := strconv.ParseUint(s.Fields[2], 10, 32)
			if err != nil {
				return fmt.Errorf("RPC decode variation error: %s", s.Fields[2])
			} else {
				s.CoreRPC.Profile1Flag = uint32(i)
				s.CoreRPC.Profile1FlagValidity = true
			}

		}
	}

	if len(s.Fields) == 3 {
		return nil
	} else {
		if s.Fields[3] != "" {
			i, err := strconv.ParseUint(s.Fields[3], 10, 32)
			if err != nil {
				return fmt.Errorf("RPC decode variation error: %s", s.Fields[3])
			} else {
				s.CoreRPC.Profile2Flag = uint32(i)
				s.CoreRPC.Profile2FlagValidity = true
			}

		}
	}

	if len(s.Fields) == 4 {
		return nil
	} else {
		if s.Fields[4] != "" {
			i, err := strconv.ParseUint(s.Fields[4], 10, 32)
			if err != nil {
				return fmt.Errorf("RPC decode variation error: %s", s.Fields[4])
			} else {
				s.CoreRPC.Profile3Flag = uint32(i)
				s.CoreRPC.Profile3FlagValidity = true
			}

		}
	}

	if len(s.Fields) == 5 {
		return nil
	} else {
		if s.Fields[5] != "" {
			i, err := strconv.ParseUint(s.Fields[5], 10, 32)
			if err != nil {
				return fmt.Errorf("RPC decode variation error: %s", s.Fields[5])
			} else {
				s.CoreRPC.Profile4Flag = uint32(i)
				s.CoreRPC.Profile4FlagValidity = true
			}

		}
	}

	if len(s.Fields) == 6 {
		return nil
	} else {
		if s.Fields[6] != "" {
			i, err := strconv.ParseUint(s.Fields[6], 10, 32)
			if err != nil {
				return fmt.Errorf("RPC decode variation error: %s", s.Fields[6])
			} else {
				s.CoreRPC.Profile5Flag = uint32(i)
				s.CoreRPC.Profile5FlagValidity = true
			}

		}
	}

	if len(s.Fields) == 7 {
		return nil
	} else {
		if s.Fields[7] != "" {
			i, err := strconv.ParseUint(s.Fields[7], 10, 32)
			if err != nil {
				return fmt.Errorf("RPC decode variation error: %s", s.Fields[7])
			} else {
				s.CoreRPC.Profile6Flag = uint32(i)
				s.CoreRPC.Profile6FlagValidity = true
			}

		}
	}

	if len(s.Fields) == 8 {
		return nil
	} else {
		if s.Fields[8] != "" {
			i, err := strconv.ParseUint(s.Fields[8], 10, 32)
			if err != nil {
				return fmt.Errorf("RPC decode variation error: %s", s.Fields[8])
			} else {
				s.CoreRPC.Profile7Flag = uint32(i)
				s.CoreRPC.Profile7FlagValidity = true
			}

		}
	}

	if len(s.Fields) == 9 {
		return nil
	} else {
		if s.Fields[9] != "" {
			i, err := strconv.ParseUint(s.Fields[9], 10, 32)
			if err != nil {
				return fmt.Errorf("RPC decode variation error: %s", s.Fields[9])
			} else {
				s.CoreRPC.Profile8Flag = uint32(i)
				s.CoreRPC.Profile8FlagValidity = true
			}

		}
	}

	if len(s.Fields) == 10 {
		return nil
	} else {
		if s.Fields[10] != "" {
			i, err := strconv.ParseUint(s.Fields[10], 10, 32)
			if err != nil {
				return fmt.Errorf("RPC decode variation error: %s", s.Fields[10])
			} else {
				s.CoreRPC.Profile9Flag = uint32(i)
				s.CoreRPC.Profile9FlagValidity = true
			}

		}
	}

	if len(s.Fields) == 11 {
		return nil
	} else {
		if s.Fields[11] != "" {
			i, err := strconv.ParseUint(s.Fields[11], 10, 32)
			if err != nil {
				return fmt.Errorf("RPC decode variation error: %s", s.Fields[11])
			} else {
				s.CoreRPC.Profile10Flag = uint32(i)
				s.CoreRPC.Profile10FlagValidity = true
			}

		}
	}

	if len(s.Fields) == 12 {
		return nil
	} else {
		if s.Fields[12] != "" {
			i, err := strconv.ParseUint(s.Fields[12], 10, 32)
			if err != nil {
				return fmt.Errorf("RPC decode variation error: %s", s.Fields[12])
			} else {
				s.CoreRPC.Profile11Flag = uint32(i)
				s.CoreRPC.Profile11FlagValidity = true
			}

		}
	}

	if len(s.Fields) == 13 {
		return nil
	} else {
		if s.Fields[13] != "" {
			i, err := strconv.ParseUint(s.Fields[13], 10, 32)
			if err != nil {
				return fmt.Errorf("RPC decode variation error: %s", s.Fields[13])
			} else {
				s.CoreRPC.Profile12Flag = uint32(i)
				s.CoreRPC.Profile12FlagValidity = true
			}

		}
	}

	if len(s.Fields) == 14 {
		return nil
	} else {
		if s.Fields[14] != "" {
			i, err := strconv.ParseUint(s.Fields[14], 10, 32)
			if err != nil {
				return fmt.Errorf("RPC decode variation error: %s", s.Fields[14])
			} else {
				s.CoreRPC.Profile13Flag = uint32(i)
				s.CoreRPC.Profile13FlagValidity = true
			}

		}
	}

	if len(s.Fields) == 15 {
		return nil
	} else {
		if s.Fields[15] != "" {
			i, err := strconv.ParseUint(s.Fields[15], 10, 32)
			if err != nil {
				return fmt.Errorf("RPC decode variation error: %s", s.Fields[15])
			} else {
				s.CoreRPC.Profile14Flag = uint32(i)
				s.CoreRPC.Profile14FlagValidity = true
			}

		}
	}

	if len(s.Fields) == 16 {
		return nil
	} else {
		if s.Fields[16] != "" {
			i, err := strconv.ParseUint(s.Fields[16], 10, 32)
			if err != nil {
				return fmt.Errorf("RPC decode variation error: %s", s.Fields[16])
			} else {
				s.CoreRPC.Profile15Flag = uint32(i)
				s.CoreRPC.Profile15FlagValidity = true
			}

		}
	}

	return nil
}

func (s *RPC) Encode() (string, error) {
	var Raw string

	if s.Format != PrefixRPC {
		err := fmt.Errorf("Sentence format %s is not a RPC sentence", s.Format)
		return "", err
	}

	Raw = s.SOS + s.Talker + s.Format

	if s.ReservedForFutureUseValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.ReservedForFutureUse), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.ReservedForFutureUse), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.Profile0FlagValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile0Flag), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile0Flag), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.Profile1FlagValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile1Flag), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile1Flag), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.Profile2FlagValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile2Flag), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile2Flag), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.Profile3FlagValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile3Flag), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile3Flag), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.Profile4FlagValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile4Flag), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile4Flag), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.Profile5FlagValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile5Flag), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile5Flag), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.Profile6FlagValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile6Flag), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile6Flag), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.Profile7FlagValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile7Flag), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile7Flag), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.Profile8FlagValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile8Flag), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile8Flag), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.Profile9FlagValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile9Flag), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile9Flag), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.Profile10FlagValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile10Flag), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile10Flag), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.Profile11FlagValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile11Flag), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile11Flag), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.Profile12FlagValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile12Flag), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile12Flag), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.Profile13FlagValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile13Flag), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile13Flag), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.Profile14FlagValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile14Flag), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile14Flag), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.Profile15FlagValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile15Flag), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreRPC.Profile15Flag), 10)
		}

	}

	check := Checksum(Raw)

	Raw = Raw + check

	return Raw, nil

}
