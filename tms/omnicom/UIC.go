//Unit interval change(0x32), Iridium/3G
// Code generated by omnicom; DO NOT EDIT
package omnicom

import (
	"errors"
	"strconv"
)

type UIC struct {
	Header        byte
	ID_Msg        uint32
	Date          Date
	New_Reporting uint32
	CRC           uint32
}

func (UIC *UIC) Parse(input string) error {
	var err error
	if len(input) > 64 {
		err = errors.New("Input message is longer than limit")
		return err
	}
	var count int = 0
	if count+8 > len(input) {
		err = errors.New("Input message length of UIC is shorter than required")
		return err
	}
	count = count + 8
	var num uint64
	if count+12 > len(input) {
		err = errors.New("Input message length of UIC is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+12], 2, 32)
	UIC.ID_Msg = uint32(num*1 - 0)
	count = count + 12
	if err != nil {
		return err
	}
	if count+27 > len(input) {
		err = errors.New("Input message length of UIC is shorter than required")
		return err
	}
	UIC.Date = *new(Date)
	err = UIC.Date.parse(input[count : count+27])
	count = count + 27
	if err != nil {
		return err
	}
	if count+9 > len(input) {
		err = errors.New("Input message length of UIC is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+9], 2, 32)
	UIC.New_Reporting = uint32(num*5 - 0)
	count = count + 9
	if err != nil {
		return err
	}
	if count+8 > len(input) {
		err = errors.New("Input message length of UIC is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+8], 2, 32)
	UIC.CRC = uint32(num*1 - 0)
	count = count + 8
	if err != nil {
		return err
	}
	return err
}
func (UIC *UIC) Encode() ([]byte, error) {
	var str string
	var s string
	var err error
	str += pad(strconv.FormatUint(uint64(UIC.Header), 2), 8)
	s = pad(strconv.FormatUint(uint64((UIC.ID_Msg+0)/1), 2), 12)
	if len(s) > 12 {
		err = errors.New("Value assigned for UIC.ID_Msg exceeds limit")
		return []byte{}, err
	}
	str += s

	s, err = UIC.Date.encode()
	if err != nil {
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((UIC.New_Reporting+0)/5), 2), 9)
	if len(s) > 9 {
		err = errors.New("Value assigned for UIC.New_Reporting exceeds limit")
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((UIC.CRC+0)/1), 2), 8)
	if len(s) > 8 {
		err = errors.New("Value assigned for UIC.CRC exceeds limit")
		return []byte{}, err
	}
	str += s

	str = attachCRC(str)
	byteList, err := decToByte(str)
	return byteList, err
}
func (UIC *UIC) getHeader() byte {
	return UIC.Header
}
func (UIC *UIC) getCRC() uint32 {
	return UIC.CRC
}
func (UIC *UIC) setCRC(crc uint32) {
	UIC.CRC = crc
}
