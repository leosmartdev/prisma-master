// Code generated by parse_nmea; DO NOT EDIT
package nmea

import "fmt"
import "strings"
import "strconv"

const (
	// PrefixSPO prefix
	PrefixSPO = "SPO"
)

// SPO represents fix data.
type CoreSPO struct {
	StationID string

	StationIDValidity bool

	ChannelSelection string

	ChannelSelectionValidity bool

	VdlSignalStrength uint32

	VdlSignalStrengthValidity bool

	VdlFirstSlotNumber uint32

	VdlFirstSlotNumberValidity bool

	VdlUtcTime uint32

	VdlUtcTimeValidity bool

	VdlSignalToNoiseRatio uint32

	VdlSignalToNoiseRatioValidity bool

	FsrSlotsOccupied uint32

	FsrSlotsOccupiedValidity bool

	FsrCrcFailureCount uint32

	FsrCrcFailureCountValidity bool

	FsrSlotReservations uint32

	FsrSlotReservationsValidity bool

	FsrAverageNoiseLevel uint32

	FsrAverageNoiseLevelValidity bool

	FsrSlotsAboveNoiseCount uint32

	FsrSlotsAboveNoiseCountValidity bool

	VsiForeachVdm uint32

	VsiForeachVdmValidity bool

	FsrForeachFrame uint32

	FsrForeachFrameValidity bool

	SentenceStatus string

	SentenceStatusValidity bool
}

type SPO struct {
	BaseSentence
	CoreSPO
}

func NewSPO(sentence BaseSentence) *SPO {
	s := new(SPO)
	s.BaseSentence = sentence

	s.StationIDValidity = false

	s.ChannelSelectionValidity = false

	s.VdlSignalStrengthValidity = false

	s.VdlFirstSlotNumberValidity = false

	s.VdlUtcTimeValidity = false

	s.VdlSignalToNoiseRatioValidity = false

	s.FsrSlotsOccupiedValidity = false

	s.FsrCrcFailureCountValidity = false

	s.FsrSlotReservationsValidity = false

	s.FsrAverageNoiseLevelValidity = false

	s.FsrSlotsAboveNoiseCountValidity = false

	s.VsiForeachVdmValidity = false

	s.FsrForeachFrameValidity = false

	s.SentenceStatusValidity = false

	return s
}

func (s *SPO) parse() error {
	var err error

	if s.Format != PrefixSPO {
		err = fmt.Errorf("%s is not a %s", s.Format, PrefixSPO)
		return err
	}

	if len(s.Fields) == 0 {
		return nil
	} else {
		if s.Fields[0] != "" {
			s.StationID = s.Fields[0]
			s.StationIDValidity = true
		}
	}

	if len(s.Fields) == 1 {
		return nil
	} else {
		if s.Fields[1] != "" {
			s.ChannelSelection = s.Fields[1]
			s.ChannelSelectionValidity = true
		}
	}

	if len(s.Fields) == 2 {
		return nil
	} else {
		if s.Fields[2] != "" {
			i, err := strconv.ParseUint(s.Fields[2], 10, 32)
			if err != nil {
				return fmt.Errorf("SPO decode variation error: %s", s.Fields[2])
			} else {
				s.CoreSPO.VdlSignalStrength = uint32(i)
				s.CoreSPO.VdlSignalStrengthValidity = true
			}

		}
	}

	if len(s.Fields) == 3 {
		return nil
	} else {
		if s.Fields[3] != "" {
			i, err := strconv.ParseUint(s.Fields[3], 10, 32)
			if err != nil {
				return fmt.Errorf("SPO decode variation error: %s", s.Fields[3])
			} else {
				s.CoreSPO.VdlFirstSlotNumber = uint32(i)
				s.CoreSPO.VdlFirstSlotNumberValidity = true
			}

		}
	}

	if len(s.Fields) == 4 {
		return nil
	} else {
		if s.Fields[4] != "" {
			i, err := strconv.ParseUint(s.Fields[4], 10, 32)
			if err != nil {
				return fmt.Errorf("SPO decode variation error: %s", s.Fields[4])
			} else {
				s.CoreSPO.VdlUtcTime = uint32(i)
				s.CoreSPO.VdlUtcTimeValidity = true
			}

		}
	}

	if len(s.Fields) == 5 {
		return nil
	} else {
		if s.Fields[5] != "" {
			i, err := strconv.ParseUint(s.Fields[5], 10, 32)
			if err != nil {
				return fmt.Errorf("SPO decode variation error: %s", s.Fields[5])
			} else {
				s.CoreSPO.VdlSignalToNoiseRatio = uint32(i)
				s.CoreSPO.VdlSignalToNoiseRatioValidity = true
			}

		}
	}

	if len(s.Fields) == 6 {
		return nil
	} else {
		if s.Fields[6] != "" {
			i, err := strconv.ParseUint(s.Fields[6], 10, 32)
			if err != nil {
				return fmt.Errorf("SPO decode variation error: %s", s.Fields[6])
			} else {
				s.CoreSPO.FsrSlotsOccupied = uint32(i)
				s.CoreSPO.FsrSlotsOccupiedValidity = true
			}

		}
	}

	if len(s.Fields) == 7 {
		return nil
	} else {
		if s.Fields[7] != "" {
			i, err := strconv.ParseUint(s.Fields[7], 10, 32)
			if err != nil {
				return fmt.Errorf("SPO decode variation error: %s", s.Fields[7])
			} else {
				s.CoreSPO.FsrCrcFailureCount = uint32(i)
				s.CoreSPO.FsrCrcFailureCountValidity = true
			}

		}
	}

	if len(s.Fields) == 8 {
		return nil
	} else {
		if s.Fields[8] != "" {
			i, err := strconv.ParseUint(s.Fields[8], 10, 32)
			if err != nil {
				return fmt.Errorf("SPO decode variation error: %s", s.Fields[8])
			} else {
				s.CoreSPO.FsrSlotReservations = uint32(i)
				s.CoreSPO.FsrSlotReservationsValidity = true
			}

		}
	}

	if len(s.Fields) == 9 {
		return nil
	} else {
		if s.Fields[9] != "" {
			i, err := strconv.ParseUint(s.Fields[9], 10, 32)
			if err != nil {
				return fmt.Errorf("SPO decode variation error: %s", s.Fields[9])
			} else {
				s.CoreSPO.FsrAverageNoiseLevel = uint32(i)
				s.CoreSPO.FsrAverageNoiseLevelValidity = true
			}

		}
	}

	if len(s.Fields) == 10 {
		return nil
	} else {
		if s.Fields[10] != "" {
			i, err := strconv.ParseUint(s.Fields[10], 10, 32)
			if err != nil {
				return fmt.Errorf("SPO decode variation error: %s", s.Fields[10])
			} else {
				s.CoreSPO.FsrSlotsAboveNoiseCount = uint32(i)
				s.CoreSPO.FsrSlotsAboveNoiseCountValidity = true
			}

		}
	}

	if len(s.Fields) == 11 {
		return nil
	} else {
		if s.Fields[11] != "" {
			i, err := strconv.ParseUint(s.Fields[11], 10, 32)
			if err != nil {
				return fmt.Errorf("SPO decode variation error: %s", s.Fields[11])
			} else {
				s.CoreSPO.VsiForeachVdm = uint32(i)
				s.CoreSPO.VsiForeachVdmValidity = true
			}

		}
	}

	if len(s.Fields) == 12 {
		return nil
	} else {
		if s.Fields[12] != "" {
			i, err := strconv.ParseUint(s.Fields[12], 10, 32)
			if err != nil {
				return fmt.Errorf("SPO decode variation error: %s", s.Fields[12])
			} else {
				s.CoreSPO.FsrForeachFrame = uint32(i)
				s.CoreSPO.FsrForeachFrameValidity = true
			}

		}
	}

	if len(s.Fields) == 13 {
		return nil
	} else {
		if s.Fields[13] != "" {
			s.SentenceStatus = s.Fields[13]
			s.SentenceStatusValidity = true
		}
	}

	return nil
}

func (s *SPO) Encode() (string, error) {
	var Raw string

	if s.Format != PrefixSPO {
		err := fmt.Errorf("Sentence format %s is not a SPO sentence", s.Format)
		return "", err
	}

	Raw = s.SOS + s.Talker + s.Format

	if s.StationIDValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreSPO.StationID

		} else {
			Raw = Raw + "," + s.CoreSPO.StationID
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.ChannelSelectionValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreSPO.ChannelSelection

		} else {
			Raw = Raw + "," + s.CoreSPO.ChannelSelection
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.VdlSignalStrengthValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreSPO.VdlSignalStrength), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreSPO.VdlSignalStrength), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.VdlFirstSlotNumberValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreSPO.VdlFirstSlotNumber), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreSPO.VdlFirstSlotNumber), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.VdlUtcTimeValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreSPO.VdlUtcTime), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreSPO.VdlUtcTime), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.VdlSignalToNoiseRatioValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreSPO.VdlSignalToNoiseRatio), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreSPO.VdlSignalToNoiseRatio), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.FsrSlotsOccupiedValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreSPO.FsrSlotsOccupied), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreSPO.FsrSlotsOccupied), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.FsrCrcFailureCountValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreSPO.FsrCrcFailureCount), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreSPO.FsrCrcFailureCount), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.FsrSlotReservationsValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreSPO.FsrSlotReservations), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreSPO.FsrSlotReservations), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.FsrAverageNoiseLevelValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreSPO.FsrAverageNoiseLevel), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreSPO.FsrAverageNoiseLevel), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.FsrSlotsAboveNoiseCountValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreSPO.FsrSlotsAboveNoiseCount), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreSPO.FsrSlotsAboveNoiseCount), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.VsiForeachVdmValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreSPO.VsiForeachVdm), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreSPO.VsiForeachVdm), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.FsrForeachFrameValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreSPO.FsrForeachFrame), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreSPO.FsrForeachFrame), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.SentenceStatusValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreSPO.SentenceStatus

		} else {
			Raw = Raw + "," + s.CoreSPO.SentenceStatus
		}
	}

	check := Checksum(Raw)

	Raw = Raw + check

	return Raw, nil

}
