// Code generated by parse_nmea; DO NOT EDIT
package nmea

import "fmt"
import "strings"
import "strconv"

const (
	// PrefixPF prefix
	PrefixPF = "PF"
)

// PF represents fix data.
type CorePF struct {
	PfChangeFactor float64

	PfChangeFactorValidity bool
}

type PF struct {
	BaseSentence
	CorePF
}

func NewPF(sentence BaseSentence) *PF {
	s := new(PF)
	s.BaseSentence = sentence

	s.PfChangeFactorValidity = false

	return s
}

func (s *PF) parse() error {
	var err error

	if s.Format != PrefixPF {
		err = fmt.Errorf("%s is not a %s", s.Format, PrefixPF)
		return err
	}

	if len(s.Fields) == 0 {
		return nil
	} else {
		if s.Fields[0] != "" {
			i, err := strconv.ParseFloat(s.Fields[0], 64)
			if err != nil {
				return fmt.Errorf("PF decode variation error: %s", s.Fields[0])
			} else {
				s.CorePF.PfChangeFactor = float64(i)
				s.CorePF.PfChangeFactorValidity = true
			}

		}
	}

	return nil
}

func (s *PF) Encode() (string, error) {
	var Raw string

	if s.Format != PrefixPF {
		err := fmt.Errorf("Sentence format %s is not a PF sentence", s.Format)
		return "", err
	}

	Raw = s.SOS + s.Talker + s.Format

	if s.PfChangeFactorValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CorePF.PfChangeFactor, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CorePF.PfChangeFactor, 'f', -1, 64)
		}

	}

	check := Checksum(Raw)

	Raw = Raw + check

	return Raw, nil

}
