// Code generated by parse_nmea; DO NOT EDIT
package nmea

import "fmt"
import "strings"
import "strconv"

const (
	// PrefixTXT prefix
	PrefixTXT = "TXT"
)

// TXT represents fix data.
type CoreTXT struct {
	SentenceCount uint32

	SentenceCountValidity bool

	SentenceIndex uint32

	SentenceIndexValidity bool

	TextIdentifier uint32

	TextIdentifierValidity bool

	TextMessage string

	TextMessageValidity bool
}

type TXT struct {
	BaseSentence
	CoreTXT
}

func NewTXT(sentence BaseSentence) *TXT {
	s := new(TXT)
	s.BaseSentence = sentence

	s.SentenceCountValidity = false

	s.SentenceIndexValidity = false

	s.TextIdentifierValidity = false

	s.TextMessageValidity = false

	return s
}

func (s *TXT) parse() error {
	var err error

	if s.Format != PrefixTXT {
		err = fmt.Errorf("%s is not a %s", s.Format, PrefixTXT)
		return err
	}

	if len(s.Fields) == 0 {
		return nil
	} else {
		if s.Fields[0] != "" {
			i, err := strconv.ParseUint(s.Fields[0], 10, 32)
			if err != nil {
				return fmt.Errorf("TXT decode variation error: %s", s.Fields[0])
			} else {
				s.CoreTXT.SentenceCount = uint32(i)
				s.CoreTXT.SentenceCountValidity = true
			}

		}
	}

	if len(s.Fields) == 1 {
		return nil
	} else {
		if s.Fields[1] != "" {
			i, err := strconv.ParseUint(s.Fields[1], 10, 32)
			if err != nil {
				return fmt.Errorf("TXT decode variation error: %s", s.Fields[1])
			} else {
				s.CoreTXT.SentenceIndex = uint32(i)
				s.CoreTXT.SentenceIndexValidity = true
			}

		}
	}

	if len(s.Fields) == 2 {
		return nil
	} else {
		if s.Fields[2] != "" {
			i, err := strconv.ParseUint(s.Fields[2], 10, 32)
			if err != nil {
				return fmt.Errorf("TXT decode variation error: %s", s.Fields[2])
			} else {
				s.CoreTXT.TextIdentifier = uint32(i)
				s.CoreTXT.TextIdentifierValidity = true
			}

		}
	}

	if len(s.Fields) == 3 {
		return nil
	} else {
		if s.Fields[3] != "" {
			s.TextMessage = s.Fields[3]
			s.TextMessageValidity = true
		}
	}

	return nil
}

func (s *TXT) Encode() (string, error) {
	var Raw string

	if s.Format != PrefixTXT {
		err := fmt.Errorf("Sentence format %s is not a TXT sentence", s.Format)
		return "", err
	}

	Raw = s.SOS + s.Talker + s.Format

	if s.SentenceCountValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTXT.SentenceCount), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTXT.SentenceCount), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.SentenceIndexValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTXT.SentenceIndex), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTXT.SentenceIndex), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.TextIdentifierValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTXT.TextIdentifier), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTXT.TextIdentifier), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.TextMessageValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreTXT.TextMessage

		} else {
			Raw = Raw + "," + s.CoreTXT.TextMessage
		}
	}

	check := Checksum(Raw)

	Raw = Raw + check

	return Raw, nil

}
