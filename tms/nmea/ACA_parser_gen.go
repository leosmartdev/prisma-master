// Code generated by parse_nmea; DO NOT EDIT
package nmea

import "fmt"
import "strings"
import "strconv"

const (
	// PrefixACA prefix
	PrefixACA = "ACA"
)

// ACA represents fix data.
type CoreACA struct {
	SeqMsgID uint32

	SeqMsgIDValidity bool

	RegionNeLat float64

	RegionNeLatValidity bool

	RegionNeLatDir string

	RegionNeLatDirValidity bool

	RegionNeLon float64

	RegionNeLonValidity bool

	RegionNeLonDir string

	RegionNeLonDirValidity bool

	RegionSwLat float64

	RegionSwLatValidity bool

	RegionSwLatDir string

	RegionSwLatDirValidity bool

	RegionSwLon float64

	RegionSwLonValidity bool

	RegionSwLonDir string

	RegionSwLonDirValidity bool

	TransitionZoneSize uint32

	TransitionZoneSizeValidity bool

	ChannelANumber uint32

	ChannelANumberValidity bool

	ChannelABandwidth uint32

	ChannelABandwidthValidity bool

	ChannelBNumber uint32

	ChannelBNumberValidity bool

	ChannelBBandwidth uint32

	ChannelBBandwidthValidity bool

	TxRxMode uint32

	TxRxModeValidity bool

	Power uint32

	PowerValidity bool

	InfoSource string

	InfoSourceValidity bool

	InUseFlag uint32

	InUseFlagValidity bool

	InUseUtcTime float64

	InUseUtcTimeValidity bool
}

type ACA struct {
	BaseSentence
	CoreACA
}

func NewACA(sentence BaseSentence) *ACA {
	s := new(ACA)
	s.BaseSentence = sentence

	s.SeqMsgIDValidity = false

	s.RegionNeLatValidity = false

	s.RegionNeLatDirValidity = false

	s.RegionNeLonValidity = false

	s.RegionNeLonDirValidity = false

	s.RegionSwLatValidity = false

	s.RegionSwLatDirValidity = false

	s.RegionSwLonValidity = false

	s.RegionSwLonDirValidity = false

	s.TransitionZoneSizeValidity = false

	s.ChannelANumberValidity = false

	s.ChannelABandwidthValidity = false

	s.ChannelBNumberValidity = false

	s.ChannelBBandwidthValidity = false

	s.TxRxModeValidity = false

	s.PowerValidity = false

	s.InfoSourceValidity = false

	s.InUseFlagValidity = false

	s.InUseUtcTimeValidity = false

	return s
}

func (s *ACA) parse() error {
	var err error

	if s.Format != PrefixACA {
		err = fmt.Errorf("%s is not a %s", s.Format, PrefixACA)
		return err
	}

	if len(s.Fields) == 0 {
		return nil
	} else {
		if s.Fields[0] != "" {
			i, err := strconv.ParseUint(s.Fields[0], 10, 32)
			if err != nil {
				return fmt.Errorf("ACA decode variation error: %s", s.Fields[0])
			} else {
				s.CoreACA.SeqMsgID = uint32(i)
				s.CoreACA.SeqMsgIDValidity = true
			}

		}
	}

	if len(s.Fields) == 1 {
		return nil
	} else {
		if s.Fields[1] != "" {
			i, err := strconv.ParseFloat(s.Fields[1], 64)
			if err != nil {
				return fmt.Errorf("ACA decode variation error: %s", s.Fields[1])
			} else {
				s.CoreACA.RegionNeLat = float64(i)
				s.CoreACA.RegionNeLatValidity = true
			}

		}
	}

	if len(s.Fields) == 2 {
		return nil
	} else {
		if s.Fields[2] != "" {
			s.RegionNeLatDir = s.Fields[2]
			s.RegionNeLatDirValidity = true
		}
	}

	if len(s.Fields) == 3 {
		return nil
	} else {
		if s.Fields[3] != "" {
			i, err := strconv.ParseFloat(s.Fields[3], 64)
			if err != nil {
				return fmt.Errorf("ACA decode variation error: %s", s.Fields[3])
			} else {
				s.CoreACA.RegionNeLon = float64(i)
				s.CoreACA.RegionNeLonValidity = true
			}

		}
	}

	if len(s.Fields) == 4 {
		return nil
	} else {
		if s.Fields[4] != "" {
			s.RegionNeLonDir = s.Fields[4]
			s.RegionNeLonDirValidity = true
		}
	}

	if len(s.Fields) == 5 {
		return nil
	} else {
		if s.Fields[5] != "" {
			i, err := strconv.ParseFloat(s.Fields[5], 64)
			if err != nil {
				return fmt.Errorf("ACA decode variation error: %s", s.Fields[5])
			} else {
				s.CoreACA.RegionSwLat = float64(i)
				s.CoreACA.RegionSwLatValidity = true
			}

		}
	}

	if len(s.Fields) == 6 {
		return nil
	} else {
		if s.Fields[6] != "" {
			s.RegionSwLatDir = s.Fields[6]
			s.RegionSwLatDirValidity = true
		}
	}

	if len(s.Fields) == 7 {
		return nil
	} else {
		if s.Fields[7] != "" {
			i, err := strconv.ParseFloat(s.Fields[7], 64)
			if err != nil {
				return fmt.Errorf("ACA decode variation error: %s", s.Fields[7])
			} else {
				s.CoreACA.RegionSwLon = float64(i)
				s.CoreACA.RegionSwLonValidity = true
			}

		}
	}

	if len(s.Fields) == 8 {
		return nil
	} else {
		if s.Fields[8] != "" {
			s.RegionSwLonDir = s.Fields[8]
			s.RegionSwLonDirValidity = true
		}
	}

	if len(s.Fields) == 9 {
		return nil
	} else {
		if s.Fields[9] != "" {
			i, err := strconv.ParseUint(s.Fields[9], 10, 32)
			if err != nil {
				return fmt.Errorf("ACA decode variation error: %s", s.Fields[9])
			} else {
				s.CoreACA.TransitionZoneSize = uint32(i)
				s.CoreACA.TransitionZoneSizeValidity = true
			}

		}
	}

	if len(s.Fields) == 10 {
		return nil
	} else {
		if s.Fields[10] != "" {
			i, err := strconv.ParseUint(s.Fields[10], 10, 32)
			if err != nil {
				return fmt.Errorf("ACA decode variation error: %s", s.Fields[10])
			} else {
				s.CoreACA.ChannelANumber = uint32(i)
				s.CoreACA.ChannelANumberValidity = true
			}

		}
	}

	if len(s.Fields) == 11 {
		return nil
	} else {
		if s.Fields[11] != "" {
			i, err := strconv.ParseUint(s.Fields[11], 10, 32)
			if err != nil {
				return fmt.Errorf("ACA decode variation error: %s", s.Fields[11])
			} else {
				s.CoreACA.ChannelABandwidth = uint32(i)
				s.CoreACA.ChannelABandwidthValidity = true
			}

		}
	}

	if len(s.Fields) == 12 {
		return nil
	} else {
		if s.Fields[12] != "" {
			i, err := strconv.ParseUint(s.Fields[12], 10, 32)
			if err != nil {
				return fmt.Errorf("ACA decode variation error: %s", s.Fields[12])
			} else {
				s.CoreACA.ChannelBNumber = uint32(i)
				s.CoreACA.ChannelBNumberValidity = true
			}

		}
	}

	if len(s.Fields) == 13 {
		return nil
	} else {
		if s.Fields[13] != "" {
			i, err := strconv.ParseUint(s.Fields[13], 10, 32)
			if err != nil {
				return fmt.Errorf("ACA decode variation error: %s", s.Fields[13])
			} else {
				s.CoreACA.ChannelBBandwidth = uint32(i)
				s.CoreACA.ChannelBBandwidthValidity = true
			}

		}
	}

	if len(s.Fields) == 14 {
		return nil
	} else {
		if s.Fields[14] != "" {
			i, err := strconv.ParseUint(s.Fields[14], 10, 32)
			if err != nil {
				return fmt.Errorf("ACA decode variation error: %s", s.Fields[14])
			} else {
				s.CoreACA.TxRxMode = uint32(i)
				s.CoreACA.TxRxModeValidity = true
			}

		}
	}

	if len(s.Fields) == 15 {
		return nil
	} else {
		if s.Fields[15] != "" {
			i, err := strconv.ParseUint(s.Fields[15], 10, 32)
			if err != nil {
				return fmt.Errorf("ACA decode variation error: %s", s.Fields[15])
			} else {
				s.CoreACA.Power = uint32(i)
				s.CoreACA.PowerValidity = true
			}

		}
	}

	if len(s.Fields) == 16 {
		return nil
	} else {
		if s.Fields[16] != "" {
			s.InfoSource = s.Fields[16]
			s.InfoSourceValidity = true
		}
	}

	if len(s.Fields) == 17 {
		return nil
	} else {
		if s.Fields[17] != "" {
			i, err := strconv.ParseUint(s.Fields[17], 10, 32)
			if err != nil {
				return fmt.Errorf("ACA decode variation error: %s", s.Fields[17])
			} else {
				s.CoreACA.InUseFlag = uint32(i)
				s.CoreACA.InUseFlagValidity = true
			}

		}
	}

	if len(s.Fields) == 18 {
		return nil
	} else {
		if s.Fields[18] != "" {
			i, err := strconv.ParseFloat(s.Fields[18], 64)
			if err != nil {
				return fmt.Errorf("ACA decode variation error: %s", s.Fields[18])
			} else {
				s.CoreACA.InUseUtcTime = float64(i)
				s.CoreACA.InUseUtcTimeValidity = true
			}

		}
	}

	return nil
}

func (s *ACA) Encode() (string, error) {
	var Raw string

	if s.Format != PrefixACA {
		err := fmt.Errorf("Sentence format %s is not a ACA sentence", s.Format)
		return "", err
	}

	Raw = s.SOS + s.Talker + s.Format

	if s.SeqMsgIDValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreACA.SeqMsgID), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreACA.SeqMsgID), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.RegionNeLatValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreACA.RegionNeLat, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreACA.RegionNeLat, 'f', -1, 64)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.RegionNeLatDirValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreACA.RegionNeLatDir

		} else {
			Raw = Raw + "," + s.CoreACA.RegionNeLatDir
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.RegionNeLonValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreACA.RegionNeLon, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreACA.RegionNeLon, 'f', -1, 64)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.RegionNeLonDirValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreACA.RegionNeLonDir

		} else {
			Raw = Raw + "," + s.CoreACA.RegionNeLonDir
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.RegionSwLatValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreACA.RegionSwLat, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreACA.RegionSwLat, 'f', -1, 64)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.RegionSwLatDirValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreACA.RegionSwLatDir

		} else {
			Raw = Raw + "," + s.CoreACA.RegionSwLatDir
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.RegionSwLonValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreACA.RegionSwLon, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreACA.RegionSwLon, 'f', -1, 64)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.RegionSwLonDirValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreACA.RegionSwLonDir

		} else {
			Raw = Raw + "," + s.CoreACA.RegionSwLonDir
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.TransitionZoneSizeValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreACA.TransitionZoneSize), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreACA.TransitionZoneSize), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.ChannelANumberValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreACA.ChannelANumber), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreACA.ChannelANumber), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.ChannelABandwidthValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreACA.ChannelABandwidth), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreACA.ChannelABandwidth), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.ChannelBNumberValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreACA.ChannelBNumber), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreACA.ChannelBNumber), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.ChannelBBandwidthValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreACA.ChannelBBandwidth), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreACA.ChannelBBandwidth), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.TxRxModeValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreACA.TxRxMode), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreACA.TxRxMode), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.PowerValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreACA.Power), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreACA.Power), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.InfoSourceValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreACA.InfoSource

		} else {
			Raw = Raw + "," + s.CoreACA.InfoSource
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.InUseFlagValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreACA.InUseFlag), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreACA.InUseFlag), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.InUseUtcTimeValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreACA.InUseUtcTime, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreACA.InUseUtcTime, 'f', -1, 64)
		}

	}

	check := Checksum(Raw)

	Raw = Raw + check

	return Raw, nil

}
