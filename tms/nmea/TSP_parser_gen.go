// Code generated by parse_nmea; DO NOT EDIT
package nmea

import "fmt"
import "strings"
import "strconv"

const (
	// PrefixTSP prefix
	PrefixTSP = "TSP"
)

// TSP represents fix data.
type CoreTSP struct {
	StationID string

	StationIDValidity bool

	SeqMsgID uint32

	SeqMsgIDValidity bool

	Channel string

	ChannelValidity bool

	UtcTime float64

	UtcTimeValidity bool

	ReferenceSlot uint32

	ReferenceSlotValidity bool

	BlockedSlotStart1 uint32

	BlockedSlotStart1Validity bool

	BlockedSlotCount1 uint32

	BlockedSlotCount1Validity bool

	BlockedSlotStart2 uint32

	BlockedSlotStart2Validity bool

	BlockedSlotCount2 uint32

	BlockedSlotCount2Validity bool

	BlockedSlotStart3 uint32

	BlockedSlotStart3Validity bool

	BlockedSlotCount3 uint32

	BlockedSlotCount3Validity bool
}

type TSP struct {
	BaseSentence
	CoreTSP
}

func NewTSP(sentence BaseSentence) *TSP {
	s := new(TSP)
	s.BaseSentence = sentence

	s.StationIDValidity = false

	s.SeqMsgIDValidity = false

	s.ChannelValidity = false

	s.UtcTimeValidity = false

	s.ReferenceSlotValidity = false

	s.BlockedSlotStart1Validity = false

	s.BlockedSlotCount1Validity = false

	s.BlockedSlotStart2Validity = false

	s.BlockedSlotCount2Validity = false

	s.BlockedSlotStart3Validity = false

	s.BlockedSlotCount3Validity = false

	return s
}

func (s *TSP) parse() error {
	var err error

	if s.Format != PrefixTSP {
		err = fmt.Errorf("%s is not a %s", s.Format, PrefixTSP)
		return err
	}

	if len(s.Fields) == 0 {
		return nil
	} else {
		if s.Fields[0] != "" {
			s.StationID = s.Fields[0]
			s.StationIDValidity = true
		}
	}

	if len(s.Fields) == 1 {
		return nil
	} else {
		if s.Fields[1] != "" {
			i, err := strconv.ParseUint(s.Fields[1], 10, 32)
			if err != nil {
				return fmt.Errorf("TSP decode variation error: %s", s.Fields[1])
			} else {
				s.CoreTSP.SeqMsgID = uint32(i)
				s.CoreTSP.SeqMsgIDValidity = true
			}

		}
	}

	if len(s.Fields) == 2 {
		return nil
	} else {
		if s.Fields[2] != "" {
			s.Channel = s.Fields[2]
			s.ChannelValidity = true
		}
	}

	if len(s.Fields) == 3 {
		return nil
	} else {
		if s.Fields[3] != "" {
			i, err := strconv.ParseFloat(s.Fields[3], 64)
			if err != nil {
				return fmt.Errorf("TSP decode variation error: %s", s.Fields[3])
			} else {
				s.CoreTSP.UtcTime = float64(i)
				s.CoreTSP.UtcTimeValidity = true
			}

		}
	}

	if len(s.Fields) == 4 {
		return nil
	} else {
		if s.Fields[4] != "" {
			i, err := strconv.ParseUint(s.Fields[4], 10, 32)
			if err != nil {
				return fmt.Errorf("TSP decode variation error: %s", s.Fields[4])
			} else {
				s.CoreTSP.ReferenceSlot = uint32(i)
				s.CoreTSP.ReferenceSlotValidity = true
			}

		}
	}

	if len(s.Fields) == 5 {
		return nil
	} else {
		if s.Fields[5] != "" {
			i, err := strconv.ParseUint(s.Fields[5], 10, 32)
			if err != nil {
				return fmt.Errorf("TSP decode variation error: %s", s.Fields[5])
			} else {
				s.CoreTSP.BlockedSlotStart1 = uint32(i)
				s.CoreTSP.BlockedSlotStart1Validity = true
			}

		}
	}

	if len(s.Fields) == 6 {
		return nil
	} else {
		if s.Fields[6] != "" {
			i, err := strconv.ParseUint(s.Fields[6], 10, 32)
			if err != nil {
				return fmt.Errorf("TSP decode variation error: %s", s.Fields[6])
			} else {
				s.CoreTSP.BlockedSlotCount1 = uint32(i)
				s.CoreTSP.BlockedSlotCount1Validity = true
			}

		}
	}

	if len(s.Fields) == 7 {
		return nil
	} else {
		if s.Fields[7] != "" {
			i, err := strconv.ParseUint(s.Fields[7], 10, 32)
			if err != nil {
				return fmt.Errorf("TSP decode variation error: %s", s.Fields[7])
			} else {
				s.CoreTSP.BlockedSlotStart2 = uint32(i)
				s.CoreTSP.BlockedSlotStart2Validity = true
			}

		}
	}

	if len(s.Fields) == 8 {
		return nil
	} else {
		if s.Fields[8] != "" {
			i, err := strconv.ParseUint(s.Fields[8], 10, 32)
			if err != nil {
				return fmt.Errorf("TSP decode variation error: %s", s.Fields[8])
			} else {
				s.CoreTSP.BlockedSlotCount2 = uint32(i)
				s.CoreTSP.BlockedSlotCount2Validity = true
			}

		}
	}

	if len(s.Fields) == 9 {
		return nil
	} else {
		if s.Fields[9] != "" {
			i, err := strconv.ParseUint(s.Fields[9], 10, 32)
			if err != nil {
				return fmt.Errorf("TSP decode variation error: %s", s.Fields[9])
			} else {
				s.CoreTSP.BlockedSlotStart3 = uint32(i)
				s.CoreTSP.BlockedSlotStart3Validity = true
			}

		}
	}

	if len(s.Fields) == 10 {
		return nil
	} else {
		if s.Fields[10] != "" {
			i, err := strconv.ParseUint(s.Fields[10], 10, 32)
			if err != nil {
				return fmt.Errorf("TSP decode variation error: %s", s.Fields[10])
			} else {
				s.CoreTSP.BlockedSlotCount3 = uint32(i)
				s.CoreTSP.BlockedSlotCount3Validity = true
			}

		}
	}

	return nil
}

func (s *TSP) Encode() (string, error) {
	var Raw string

	if s.Format != PrefixTSP {
		err := fmt.Errorf("Sentence format %s is not a TSP sentence", s.Format)
		return "", err
	}

	Raw = s.SOS + s.Talker + s.Format

	if s.StationIDValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreTSP.StationID

		} else {
			Raw = Raw + "," + s.CoreTSP.StationID
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.SeqMsgIDValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTSP.SeqMsgID), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTSP.SeqMsgID), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.ChannelValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreTSP.Channel

		} else {
			Raw = Raw + "," + s.CoreTSP.Channel
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.UtcTimeValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreTSP.UtcTime, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreTSP.UtcTime, 'f', -1, 64)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.ReferenceSlotValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTSP.ReferenceSlot), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTSP.ReferenceSlot), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.BlockedSlotStart1Validity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTSP.BlockedSlotStart1), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTSP.BlockedSlotStart1), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.BlockedSlotCount1Validity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTSP.BlockedSlotCount1), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTSP.BlockedSlotCount1), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.BlockedSlotStart2Validity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTSP.BlockedSlotStart2), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTSP.BlockedSlotStart2), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.BlockedSlotCount2Validity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTSP.BlockedSlotCount2), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTSP.BlockedSlotCount2), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.BlockedSlotStart3Validity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTSP.BlockedSlotStart3), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTSP.BlockedSlotStart3), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.BlockedSlotCount3Validity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTSP.BlockedSlotCount3), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTSP.BlockedSlotCount3), 10)
		}

	}

	check := Checksum(Raw)

	Raw = Raw + check

	return Raw, nil

}
