// Code generated by parse_nmea; DO NOT EDIT
package nmea

import "fmt"
import "strings"
import "strconv"

const (
	// PrefixVSI prefix
	PrefixVSI = "VSI"
)

// VSI represents fix data.
type CoreVSI struct {
	StationID string

	StationIDValidity bool

	SeqMsgID uint32

	SeqMsgIDValidity bool

	UtcTime float64

	UtcTimeValidity bool

	SlotNumber uint32

	SlotNumberValidity bool

	SignalStrength float64

	SignalStrengthValidity bool

	SignalToNoiseRatio float64

	SignalToNoiseRatioValidity bool
}

type VSI struct {
	BaseSentence
	CoreVSI
}

func NewVSI(sentence BaseSentence) *VSI {
	s := new(VSI)
	s.BaseSentence = sentence

	s.StationIDValidity = false

	s.SeqMsgIDValidity = false

	s.UtcTimeValidity = false

	s.SlotNumberValidity = false

	s.SignalStrengthValidity = false

	s.SignalToNoiseRatioValidity = false

	return s
}

func (s *VSI) parse() error {
	var err error

	if s.Format != PrefixVSI {
		err = fmt.Errorf("%s is not a %s", s.Format, PrefixVSI)
		return err
	}

	if len(s.Fields) == 0 {
		return nil
	} else {
		if s.Fields[0] != "" {
			s.StationID = s.Fields[0]
			s.StationIDValidity = true
		}
	}

	if len(s.Fields) == 1 {
		return nil
	} else {
		if s.Fields[1] != "" {
			i, err := strconv.ParseUint(s.Fields[1], 10, 32)
			if err != nil {
				return fmt.Errorf("VSI decode variation error: %s", s.Fields[1])
			} else {
				s.CoreVSI.SeqMsgID = uint32(i)
				s.CoreVSI.SeqMsgIDValidity = true
			}

		}
	}

	if len(s.Fields) == 2 {
		return nil
	} else {
		if s.Fields[2] != "" {
			i, err := strconv.ParseFloat(s.Fields[2], 64)
			if err != nil {
				return fmt.Errorf("VSI decode variation error: %s", s.Fields[2])
			} else {
				s.CoreVSI.UtcTime = float64(i)
				s.CoreVSI.UtcTimeValidity = true
			}

		}
	}

	if len(s.Fields) == 3 {
		return nil
	} else {
		if s.Fields[3] != "" {
			i, err := strconv.ParseUint(s.Fields[3], 10, 32)
			if err != nil {
				return fmt.Errorf("VSI decode variation error: %s", s.Fields[3])
			} else {
				s.CoreVSI.SlotNumber = uint32(i)
				s.CoreVSI.SlotNumberValidity = true
			}

		}
	}

	if len(s.Fields) == 4 {
		return nil
	} else {
		if s.Fields[4] != "" {
			i, err := strconv.ParseFloat(s.Fields[4], 64)
			if err != nil {
				return fmt.Errorf("VSI decode variation error: %s", s.Fields[4])
			} else {
				s.CoreVSI.SignalStrength = float64(i)
				s.CoreVSI.SignalStrengthValidity = true
			}

		}
	}

	if len(s.Fields) == 5 {
		return nil
	} else {
		if s.Fields[5] != "" {
			i, err := strconv.ParseFloat(s.Fields[5], 64)
			if err != nil {
				return fmt.Errorf("VSI decode variation error: %s", s.Fields[5])
			} else {
				s.CoreVSI.SignalToNoiseRatio = float64(i)
				s.CoreVSI.SignalToNoiseRatioValidity = true
			}

		}
	}

	return nil
}

func (s *VSI) Encode() (string, error) {
	var Raw string

	if s.Format != PrefixVSI {
		err := fmt.Errorf("Sentence format %s is not a VSI sentence", s.Format)
		return "", err
	}

	Raw = s.SOS + s.Talker + s.Format

	if s.StationIDValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreVSI.StationID

		} else {
			Raw = Raw + "," + s.CoreVSI.StationID
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.SeqMsgIDValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreVSI.SeqMsgID), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreVSI.SeqMsgID), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.UtcTimeValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreVSI.UtcTime, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreVSI.UtcTime, 'f', -1, 64)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.SlotNumberValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreVSI.SlotNumber), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreVSI.SlotNumber), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.SignalStrengthValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreVSI.SignalStrength, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreVSI.SignalStrength, 'f', -1, 64)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.SignalToNoiseRatioValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreVSI.SignalToNoiseRatio, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreVSI.SignalToNoiseRatio, 'f', -1, 64)
		}

	}

	check := Checksum(Raw)

	Raw = Raw + check

	return Raw, nil

}
