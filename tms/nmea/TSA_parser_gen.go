// Code generated by parse_nmea; DO NOT EDIT
package nmea

import "fmt"
import "strings"
import "strconv"

const (
	// PrefixTSA prefix
	PrefixTSA = "TSA"
)

// TSA represents fix data.
type CoreTSA struct {
	StationID string

	StationIDValidity bool

	VdmSeqMsgID uint32

	VdmSeqMsgIDValidity bool

	VdmChannel string

	VdmChannelValidity bool

	ReqUtcFrame uint32

	ReqUtcFrameValidity bool

	ReqSlotNumber uint32

	ReqSlotNumberValidity bool

	ReqPriority uint32

	ReqPriorityValidity bool
}

type TSA struct {
	BaseSentence
	CoreTSA
}

func NewTSA(sentence BaseSentence) *TSA {
	s := new(TSA)
	s.BaseSentence = sentence

	s.StationIDValidity = false

	s.VdmSeqMsgIDValidity = false

	s.VdmChannelValidity = false

	s.ReqUtcFrameValidity = false

	s.ReqSlotNumberValidity = false

	s.ReqPriorityValidity = false

	return s
}

func (s *TSA) parse() error {
	var err error

	if s.Format != PrefixTSA {
		err = fmt.Errorf("%s is not a %s", s.Format, PrefixTSA)
		return err
	}

	if len(s.Fields) == 0 {
		return nil
	} else {
		if s.Fields[0] != "" {
			s.StationID = s.Fields[0]
			s.StationIDValidity = true
		}
	}

	if len(s.Fields) == 1 {
		return nil
	} else {
		if s.Fields[1] != "" {
			i, err := strconv.ParseUint(s.Fields[1], 10, 32)
			if err != nil {
				return fmt.Errorf("TSA decode variation error: %s", s.Fields[1])
			} else {
				s.CoreTSA.VdmSeqMsgID = uint32(i)
				s.CoreTSA.VdmSeqMsgIDValidity = true
			}

		}
	}

	if len(s.Fields) == 2 {
		return nil
	} else {
		if s.Fields[2] != "" {
			s.VdmChannel = s.Fields[2]
			s.VdmChannelValidity = true
		}
	}

	if len(s.Fields) == 3 {
		return nil
	} else {
		if s.Fields[3] != "" {
			i, err := strconv.ParseUint(s.Fields[3], 10, 32)
			if err != nil {
				return fmt.Errorf("TSA decode variation error: %s", s.Fields[3])
			} else {
				s.CoreTSA.ReqUtcFrame = uint32(i)
				s.CoreTSA.ReqUtcFrameValidity = true
			}

		}
	}

	if len(s.Fields) == 4 {
		return nil
	} else {
		if s.Fields[4] != "" {
			i, err := strconv.ParseUint(s.Fields[4], 10, 32)
			if err != nil {
				return fmt.Errorf("TSA decode variation error: %s", s.Fields[4])
			} else {
				s.CoreTSA.ReqSlotNumber = uint32(i)
				s.CoreTSA.ReqSlotNumberValidity = true
			}

		}
	}

	if len(s.Fields) == 5 {
		return nil
	} else {
		if s.Fields[5] != "" {
			i, err := strconv.ParseUint(s.Fields[5], 10, 32)
			if err != nil {
				return fmt.Errorf("TSA decode variation error: %s", s.Fields[5])
			} else {
				s.CoreTSA.ReqPriority = uint32(i)
				s.CoreTSA.ReqPriorityValidity = true
			}

		}
	}

	return nil
}

func (s *TSA) Encode() (string, error) {
	var Raw string

	if s.Format != PrefixTSA {
		err := fmt.Errorf("Sentence format %s is not a TSA sentence", s.Format)
		return "", err
	}

	Raw = s.SOS + s.Talker + s.Format

	if s.StationIDValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreTSA.StationID

		} else {
			Raw = Raw + "," + s.CoreTSA.StationID
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.VdmSeqMsgIDValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTSA.VdmSeqMsgID), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTSA.VdmSeqMsgID), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.VdmChannelValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreTSA.VdmChannel

		} else {
			Raw = Raw + "," + s.CoreTSA.VdmChannel
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.ReqUtcFrameValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTSA.ReqUtcFrame), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTSA.ReqUtcFrame), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.ReqSlotNumberValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTSA.ReqSlotNumber), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTSA.ReqSlotNumber), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.ReqPriorityValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTSA.ReqPriority), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTSA.ReqPriority), 10)
		}

	}

	check := Checksum(Raw)

	Raw = Raw + check

	return Raw, nil

}
