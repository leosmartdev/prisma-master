// Code generated by parse_nmea; DO NOT EDIT
package nmea

import "fmt"
import "strings"
import "strconv"

const (
	// PrefixSHUTDOWN prefix
	PrefixSHUTDOWN = "SHUTDOWN"
)

// SHUTDOWN represents fix data.
type CoreSHUTDOWN struct {
	RebootFlag uint32

	RebootFlagValidity bool
}

type SHUTDOWN struct {
	BaseSentence
	CoreSHUTDOWN
}

func NewSHUTDOWN(sentence BaseSentence) *SHUTDOWN {
	s := new(SHUTDOWN)
	s.BaseSentence = sentence

	s.RebootFlagValidity = false

	return s
}

func (s *SHUTDOWN) parse() error {
	var err error

	if s.Format != PrefixSHUTDOWN {
		err = fmt.Errorf("%s is not a %s", s.Format, PrefixSHUTDOWN)
		return err
	}

	if len(s.Fields) == 0 {
		return nil
	} else {
		if s.Fields[0] != "" {
			i, err := strconv.ParseUint(s.Fields[0], 10, 32)
			if err != nil {
				return fmt.Errorf("SHUTDOWN decode variation error: %s", s.Fields[0])
			} else {
				s.CoreSHUTDOWN.RebootFlag = uint32(i)
				s.CoreSHUTDOWN.RebootFlagValidity = true
			}

		}
	}

	return nil
}

func (s *SHUTDOWN) Encode() (string, error) {
	var Raw string

	if s.Format != PrefixSHUTDOWN {
		err := fmt.Errorf("Sentence format %s is not a SHUTDOWN sentence", s.Format)
		return "", err
	}

	Raw = s.SOS + s.Talker + s.Format

	if s.RebootFlagValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreSHUTDOWN.RebootFlag), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreSHUTDOWN.RebootFlag), 10)
		}

	}

	check := Checksum(Raw)

	Raw = Raw + check

	return Raw, nil

}
