// Code generated by parse_nmea; DO NOT EDIT
package nmea

import "fmt"
import "strings"
import "strconv"

const (
	// PrefixIT prefix
	PrefixIT = "IT"
)

// IT represents fix data.
type CoreIT struct {
	UtcTimestamp uint32

	UtcTimestampValidity bool

	TrackLocationWtoEinM int32

	TrackLocationWtoEinMValidity bool

	TrackLocationNtoSinM int32

	TrackLocationNtoSinMValidity bool

	TrackLocationWtoEinDeg float64

	TrackLocationWtoEinDegValidity bool

	TrackLocationNtoSinDeg float64

	TrackLocationNtoSinDegValidity bool
}

type IT struct {
	BaseSentence
	CoreIT
}

func NewIT(sentence BaseSentence) *IT {
	s := new(IT)
	s.BaseSentence = sentence

	s.UtcTimestampValidity = false

	s.TrackLocationWtoEinMValidity = false

	s.TrackLocationNtoSinMValidity = false

	s.TrackLocationWtoEinDegValidity = false

	s.TrackLocationNtoSinDegValidity = false

	return s
}

func (s *IT) parse() error {
	var err error

	if s.Format != PrefixIT {
		err = fmt.Errorf("%s is not a %s", s.Format, PrefixIT)
		return err
	}

	if len(s.Fields) == 0 {
		return nil
	} else {
		if s.Fields[0] != "" {
			i, err := strconv.ParseUint(s.Fields[0], 10, 32)
			if err != nil {
				return fmt.Errorf("IT decode variation error: %s", s.Fields[0])
			} else {
				s.CoreIT.UtcTimestamp = uint32(i)
				s.CoreIT.UtcTimestampValidity = true
			}

		}
	}

	if len(s.Fields) == 1 {
		return nil
	} else {
		if s.Fields[1] != "" {
			i, err := strconv.ParseInt(s.Fields[1], 10, 32)
			if err != nil {
				return fmt.Errorf("IT decode variation error: %s", s.Fields[1])
			} else {
				s.CoreIT.TrackLocationWtoEinM = int32(i)
				s.CoreIT.TrackLocationWtoEinMValidity = true
			}

		}
	}

	if len(s.Fields) == 2 {
		return nil
	} else {
		if s.Fields[2] != "" {
			i, err := strconv.ParseInt(s.Fields[2], 10, 32)
			if err != nil {
				return fmt.Errorf("IT decode variation error: %s", s.Fields[2])
			} else {
				s.CoreIT.TrackLocationNtoSinM = int32(i)
				s.CoreIT.TrackLocationNtoSinMValidity = true
			}

		}
	}

	if len(s.Fields) == 3 {
		return nil
	} else {
		if s.Fields[3] != "" {
			i, err := strconv.ParseFloat(s.Fields[3], 64)
			if err != nil {
				return fmt.Errorf("IT decode variation error: %s", s.Fields[3])
			} else {
				s.CoreIT.TrackLocationWtoEinDeg = float64(i)
				s.CoreIT.TrackLocationWtoEinDegValidity = true
			}

		}
	}

	if len(s.Fields) == 4 {
		return nil
	} else {
		if s.Fields[4] != "" {
			i, err := strconv.ParseFloat(s.Fields[4], 64)
			if err != nil {
				return fmt.Errorf("IT decode variation error: %s", s.Fields[4])
			} else {
				s.CoreIT.TrackLocationNtoSinDeg = float64(i)
				s.CoreIT.TrackLocationNtoSinDegValidity = true
			}

		}
	}

	return nil
}

func (s *IT) Encode() (string, error) {
	var Raw string

	if s.Format != PrefixIT {
		err := fmt.Errorf("Sentence format %s is not a IT sentence", s.Format)
		return "", err
	}

	Raw = s.SOS + s.Talker + s.Format

	if s.UtcTimestampValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreIT.UtcTimestamp), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreIT.UtcTimestamp), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.TrackLocationWtoEinMValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatInt(int64(s.CoreIT.TrackLocationWtoEinM), 10)

		} else {
			Raw = Raw + "," + strconv.FormatInt(int64(s.CoreIT.TrackLocationWtoEinM), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.TrackLocationNtoSinMValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatInt(int64(s.CoreIT.TrackLocationNtoSinM), 10)

		} else {
			Raw = Raw + "," + strconv.FormatInt(int64(s.CoreIT.TrackLocationNtoSinM), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.TrackLocationWtoEinDegValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreIT.TrackLocationWtoEinDeg, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreIT.TrackLocationWtoEinDeg, 'f', -1, 64)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.TrackLocationNtoSinDegValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreIT.TrackLocationNtoSinDeg, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreIT.TrackLocationNtoSinDeg, 'f', -1, 64)
		}

	}

	check := Checksum(Raw)

	Raw = Raw + check

	return Raw, nil

}
