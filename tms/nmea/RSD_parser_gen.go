// Code generated by parse_nmea; DO NOT EDIT
package nmea

import "fmt"
import "strings"
import "strconv"

const (
	// PrefixRSD prefix
	PrefixRSD = "RSD"
)

// RSD represents fix data.
type CoreRSD struct {
	Origin1Range float64

	Origin1RangeValidity bool

	Origin1Bearing float64

	Origin1BearingValidity bool

	VariableRangeMarker1 float64

	VariableRangeMarker1Validity bool

	ElectronicBearingLine1 float64

	ElectronicBearingLine1Validity bool

	Origin2Range float64

	Origin2RangeValidity bool

	Origin2Bearing float64

	Origin2BearingValidity bool

	VariableRangeMarker2 float64

	VariableRangeMarker2Validity bool

	ElectronicBearingLine2 float64

	ElectronicBearingLine2Validity bool

	CursorRange float64

	CursorRangeValidity bool

	CursorBearing float64

	CursorBearingValidity bool

	RangeScale float64

	RangeScaleValidity bool

	RangeUnits string

	RangeUnitsValidity bool

	DisplayRotation string

	DisplayRotationValidity bool
}

type RSD struct {
	BaseSentence
	CoreRSD
}

func NewRSD(sentence BaseSentence) *RSD {
	s := new(RSD)
	s.BaseSentence = sentence

	s.Origin1RangeValidity = false

	s.Origin1BearingValidity = false

	s.VariableRangeMarker1Validity = false

	s.ElectronicBearingLine1Validity = false

	s.Origin2RangeValidity = false

	s.Origin2BearingValidity = false

	s.VariableRangeMarker2Validity = false

	s.ElectronicBearingLine2Validity = false

	s.CursorRangeValidity = false

	s.CursorBearingValidity = false

	s.RangeScaleValidity = false

	s.RangeUnitsValidity = false

	s.DisplayRotationValidity = false

	return s
}

func (s *RSD) parse() error {
	var err error

	if s.Format != PrefixRSD {
		err = fmt.Errorf("%s is not a %s", s.Format, PrefixRSD)
		return err
	}

	if len(s.Fields) == 0 {
		return nil
	} else {
		if s.Fields[0] != "" {
			i, err := strconv.ParseFloat(s.Fields[0], 64)
			if err != nil {
				return fmt.Errorf("RSD decode variation error: %s", s.Fields[0])
			} else {
				s.CoreRSD.Origin1Range = float64(i)
				s.CoreRSD.Origin1RangeValidity = true
			}

		}
	}

	if len(s.Fields) == 1 {
		return nil
	} else {
		if s.Fields[1] != "" {
			i, err := strconv.ParseFloat(s.Fields[1], 64)
			if err != nil {
				return fmt.Errorf("RSD decode variation error: %s", s.Fields[1])
			} else {
				s.CoreRSD.Origin1Bearing = float64(i)
				s.CoreRSD.Origin1BearingValidity = true
			}

		}
	}

	if len(s.Fields) == 2 {
		return nil
	} else {
		if s.Fields[2] != "" {
			i, err := strconv.ParseFloat(s.Fields[2], 64)
			if err != nil {
				return fmt.Errorf("RSD decode variation error: %s", s.Fields[2])
			} else {
				s.CoreRSD.VariableRangeMarker1 = float64(i)
				s.CoreRSD.VariableRangeMarker1Validity = true
			}

		}
	}

	if len(s.Fields) == 3 {
		return nil
	} else {
		if s.Fields[3] != "" {
			i, err := strconv.ParseFloat(s.Fields[3], 64)
			if err != nil {
				return fmt.Errorf("RSD decode variation error: %s", s.Fields[3])
			} else {
				s.CoreRSD.ElectronicBearingLine1 = float64(i)
				s.CoreRSD.ElectronicBearingLine1Validity = true
			}

		}
	}

	if len(s.Fields) == 4 {
		return nil
	} else {
		if s.Fields[4] != "" {
			i, err := strconv.ParseFloat(s.Fields[4], 64)
			if err != nil {
				return fmt.Errorf("RSD decode variation error: %s", s.Fields[4])
			} else {
				s.CoreRSD.Origin2Range = float64(i)
				s.CoreRSD.Origin2RangeValidity = true
			}

		}
	}

	if len(s.Fields) == 5 {
		return nil
	} else {
		if s.Fields[5] != "" {
			i, err := strconv.ParseFloat(s.Fields[5], 64)
			if err != nil {
				return fmt.Errorf("RSD decode variation error: %s", s.Fields[5])
			} else {
				s.CoreRSD.Origin2Bearing = float64(i)
				s.CoreRSD.Origin2BearingValidity = true
			}

		}
	}

	if len(s.Fields) == 6 {
		return nil
	} else {
		if s.Fields[6] != "" {
			i, err := strconv.ParseFloat(s.Fields[6], 64)
			if err != nil {
				return fmt.Errorf("RSD decode variation error: %s", s.Fields[6])
			} else {
				s.CoreRSD.VariableRangeMarker2 = float64(i)
				s.CoreRSD.VariableRangeMarker2Validity = true
			}

		}
	}

	if len(s.Fields) == 7 {
		return nil
	} else {
		if s.Fields[7] != "" {
			i, err := strconv.ParseFloat(s.Fields[7], 64)
			if err != nil {
				return fmt.Errorf("RSD decode variation error: %s", s.Fields[7])
			} else {
				s.CoreRSD.ElectronicBearingLine2 = float64(i)
				s.CoreRSD.ElectronicBearingLine2Validity = true
			}

		}
	}

	if len(s.Fields) == 8 {
		return nil
	} else {
		if s.Fields[8] != "" {
			i, err := strconv.ParseFloat(s.Fields[8], 64)
			if err != nil {
				return fmt.Errorf("RSD decode variation error: %s", s.Fields[8])
			} else {
				s.CoreRSD.CursorRange = float64(i)
				s.CoreRSD.CursorRangeValidity = true
			}

		}
	}

	if len(s.Fields) == 9 {
		return nil
	} else {
		if s.Fields[9] != "" {
			i, err := strconv.ParseFloat(s.Fields[9], 64)
			if err != nil {
				return fmt.Errorf("RSD decode variation error: %s", s.Fields[9])
			} else {
				s.CoreRSD.CursorBearing = float64(i)
				s.CoreRSD.CursorBearingValidity = true
			}

		}
	}

	if len(s.Fields) == 10 {
		return nil
	} else {
		if s.Fields[10] != "" {
			i, err := strconv.ParseFloat(s.Fields[10], 64)
			if err != nil {
				return fmt.Errorf("RSD decode variation error: %s", s.Fields[10])
			} else {
				s.CoreRSD.RangeScale = float64(i)
				s.CoreRSD.RangeScaleValidity = true
			}

		}
	}

	if len(s.Fields) == 11 {
		return nil
	} else {
		if s.Fields[11] != "" {
			s.RangeUnits = s.Fields[11]
			s.RangeUnitsValidity = true
		}
	}

	if len(s.Fields) == 12 {
		return nil
	} else {
		if s.Fields[12] != "" {
			s.DisplayRotation = s.Fields[12]
			s.DisplayRotationValidity = true
		}
	}

	return nil
}

func (s *RSD) Encode() (string, error) {
	var Raw string

	if s.Format != PrefixRSD {
		err := fmt.Errorf("Sentence format %s is not a RSD sentence", s.Format)
		return "", err
	}

	Raw = s.SOS + s.Talker + s.Format

	if s.Origin1RangeValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreRSD.Origin1Range, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreRSD.Origin1Range, 'f', -1, 64)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.Origin1BearingValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreRSD.Origin1Bearing, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreRSD.Origin1Bearing, 'f', -1, 64)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.VariableRangeMarker1Validity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreRSD.VariableRangeMarker1, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreRSD.VariableRangeMarker1, 'f', -1, 64)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.ElectronicBearingLine1Validity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreRSD.ElectronicBearingLine1, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreRSD.ElectronicBearingLine1, 'f', -1, 64)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.Origin2RangeValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreRSD.Origin2Range, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreRSD.Origin2Range, 'f', -1, 64)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.Origin2BearingValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreRSD.Origin2Bearing, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreRSD.Origin2Bearing, 'f', -1, 64)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.VariableRangeMarker2Validity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreRSD.VariableRangeMarker2, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreRSD.VariableRangeMarker2, 'f', -1, 64)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.ElectronicBearingLine2Validity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreRSD.ElectronicBearingLine2, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreRSD.ElectronicBearingLine2, 'f', -1, 64)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.CursorRangeValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreRSD.CursorRange, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreRSD.CursorRange, 'f', -1, 64)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.CursorBearingValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreRSD.CursorBearing, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreRSD.CursorBearing, 'f', -1, 64)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.RangeScaleValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreRSD.RangeScale, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreRSD.RangeScale, 'f', -1, 64)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.RangeUnitsValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreRSD.RangeUnits

		} else {
			Raw = Raw + "," + s.CoreRSD.RangeUnits
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.DisplayRotationValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreRSD.DisplayRotation

		} else {
			Raw = Raw + "," + s.CoreRSD.DisplayRotation
		}
	}

	check := Checksum(Raw)

	Raw = Raw + check

	return Raw, nil

}
