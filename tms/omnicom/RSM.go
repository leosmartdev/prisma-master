//Request a specific message(0x33), Iridium/3G
// Code generated by omnicom; DO NOT EDIT
package omnicom

import (
	"errors"
	"strconv"
)

type RSM struct {
	Header     byte
	ID_Msg     uint32
	Date       Date
	Msg_to_Ask uint32
	Padding    uint32
	CRC        uint32
}

func (RSM *RSM) Parse(input string) error {
	var err error
	if len(input) > 64 {
		err = errors.New("Input message is longer than limit")
		return err
	}
	var count int = 0
	if count+8 > len(input) {
		err = errors.New("Input message length of RSM is shorter than required")
		return err
	}
	count = count + 8
	var num uint64
	if count+12 > len(input) {
		err = errors.New("Input message length of RSM is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+12], 2, 32)
	RSM.ID_Msg = uint32(num*1 - 0)
	count = count + 12
	if err != nil {
		return err
	}
	if count+27 > len(input) {
		err = errors.New("Input message length of RSM is shorter than required")
		return err
	}
	RSM.Date = *new(Date)
	err = RSM.Date.parse(input[count : count+27])
	count = count + 27
	if err != nil {
		return err
	}
	if count+8 > len(input) {
		err = errors.New("Input message length of RSM is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+8], 2, 32)
	RSM.Msg_to_Ask = uint32(num*1 - 0)
	count = count + 8
	if err != nil {
		return err
	}
	if count+(8-count%8) > len(input) {
		err = errors.New("Input message length of RSM is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+(8-count%8)], 2, 32)
	RSM.Padding = uint32(num*1 - 0)
	count = count + (8 - count%8)
	if err != nil {
		return err
	}
	if count+8 > len(input) {
		err = errors.New("Input message length of RSM is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+8], 2, 32)
	RSM.CRC = uint32(num*1 - 0)
	count = count + 8
	if err != nil {
		return err
	}
	return err
}
func (RSM *RSM) Encode() ([]byte, error) {
	var str string
	var s string
	var err error
	str += pad(strconv.FormatUint(uint64(RSM.Header), 2), 8)
	s = pad(strconv.FormatUint(uint64((RSM.ID_Msg+0)/1), 2), 12)
	if len(s) > 12 {
		err = errors.New("Value assigned for RSM.ID_Msg exceeds limit")
		return []byte{}, err
	}
	str += s

	s, err = RSM.Date.encode()
	if err != nil {
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((RSM.Msg_to_Ask+0)/1), 2), 8)
	if len(s) > 8 {
		err = errors.New("Value assigned for RSM.Msg_to_Ask exceeds limit")
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((RSM.Padding+0)/1), 2), 8-len(str)%8)
	if len(s) > (8 - len(str)%8) {
		err = errors.New("Value assigned for RSM.Padding exceeds limit")
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((RSM.CRC+0)/1), 2), 8)
	if len(s) > 8 {
		err = errors.New("Value assigned for RSM.CRC exceeds limit")
		return []byte{}, err
	}
	str += s

	str = attachCRC(str)
	byteList, err := decToByte(str)
	return byteList, err
}
func (RSM *RSM) getHeader() byte {
	return RSM.Header
}
func (RSM *RSM) getCRC() uint32 {
	return RSM.CRC
}
func (RSM *RSM) setCRC(crc uint32) {
	RSM.CRC = crc
}
