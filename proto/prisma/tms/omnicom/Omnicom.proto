// Code generated by omnicom; DO NOT EDIT 
syntax = "proto3";
package prisma.tms.omnicom;

//messages used to correspond to Iridium/3G sentences

message Omni {

	repeated string errors = 1; // errors found parsing or validating omnicom

	oneof omnicom {
	   Spr spr = 656675;
	   Hpr hpr = 656677; 
	   Ar ar = 656765; 
	   Gp gp = 656766;
	   Aup aup = 656767;
	   Ga ga = 656768;
	   Bm bm = 656769;
	   Abm abm = 656770;
	   Tma tma = 656771;
	   Aa aa = 656772;
	   Rmh rmh = 656773;
	   Uic uic = 656774;
	   Rsm rsm = 656776;
	   Ugp ugp = 656778;
	   Uaup uaup = 656779;
	   UGPolygon ugpolygon = 656780;
	   UGCircle ugcircle = 656781;
	   Gbmn gbmn = 656782;
	   Dg dg = 656783;
	   BMStoV bmstov = 656784;
	   Uf uf = 656785;
	   Spm spm = 656786;
	   Sdr sdr = 656787;
	   Smdr smdr = 656788;
	   Sprs sprs = 656789;
	}	

}

//Voltage
message Vltg {
	double V_IN = 1;
}

//Geofence
message GF {
	uint32 Status_Alert = 1;
	uint32 GEO_ID       = 2;

}

//Move
message MV {
	float Speed = 1 ; 
	uint32 Heading = 2;
}

//Date Position
message DatePosition {
	uint32 Year = 1;     
	uint32 Month = 2;    
	uint32 Day = 3;     
	uint32 Minute = 4;   
	float Longitude = 5; 
	float Latitude = 6; 
}


message DataReport {
	uint32 Number_Data_Report = 1;
	DatePosition Date_Position = 2;
	MV Move = 3;
	uint32 Period = 4;
	Vltg Voltage = 5;
	GF Geofence = 6;
}

message DateEvent {
	uint32 Year = 1;
	uint32 Month = 2;
	uint32 Day = 3;
	uint32 Minute = 4;
}

message PowerUp {
	uint32 Alert_Status = 1;
	uint32 Power_Up_Status = 2;
}

message PowerDown {
	uint32 Alert_Status = 1;   
	uint32 Power_Down_Status = 2;
}

message BatteryAlert {
	uint32 Alert_Status = 1;
	uint32 Current_Battery_Alert_Status = 2;
}

message IntrusionAlert {
	uint32 Alert_Status  = 1;
	uint32 Current_Intrusion_Status = 2;
}

message NoPositionFix {
	uint32 Alert_Status = 1;
	uint32 Current_No_Position_Fix_Status = 2;
	uint32 Number_Satellite_in_View = 3;
}

message JBDomeAlert {
	uint32 Alert_Status = 1;
	uint32 Current_JB_Dome_Status = 2; 
}

message LossMobileCom {
	uint32 Alert_Status = 1;
	uint32 Current_Loss_Mobile_Com_Status = 2;
}

message DaylightAlert {
	uint32 Alert_Status = 1;
	uint32 Current_Daylight_Alert = 2;
}

message AssistanceAlert {
	uint32 Alert_Status = 1;
	uint32 Current_Assistance_Alert_Status = 2;
}

message TestMode {
	uint32 Alert_Status = 1;
	uint32 Current_Test_Mode_Status = 2;
}

message PositionReportingInterval {
	uint32 Value_in_mn = 1;
	uint32 Modified = 2;
}

message GeofencingEnable {
	uint32 On_Off = 1;
	uint32 Modified = 2;
}

message PositionCollectionInterval {
	uint64 Value_in_mn = 1;
	uint64 Modified = 2;
}

//Password
message Pwd  {
	bytes Value_in_mn = 1;
	uint32 Modified = 2;  
}

//Routing
message Rtg {
	uint32 Value_in_mn = 1;
	uint32 Modified = 2;
}

message WebServiceAPIURLSending {
	bytes Value = 1; //[]rune
	uint32 Modified = 2;
}

message WebServiceAPIURLReceiving {
	bytes Value = 1; //[]rune
	uint32 Modified = 2;
}

//Array
message Arr {
	bytes Value = 1;
	uint32 modified = 2;
}

//Date
message Dt {
	uint32 Year  = 1; 
	uint32 Month = 2; 
	uint32 Day  = 3; 
	uint32 Minute = 4;
}

message DateInterval {
	Dt Start = 1;
	Dt Stop = 2; 
}

message PositionReportingIntervalStoV {
	uint32 Value_in_mn = 1;
	uint32 To_Modify = 2;  
}

message GeofencingEnableStoV {
	uint32 On_Off  = 1;
	uint32 To_Modify = 2;
}

message GeofenceStatusCheckIntervalStoV {
	uint32 Value_in_mn = 1;
	uint32 To_Modify = 2;
}

message PasswordStoV {
	bytes Value = 1;
	uint32 To_Modify = 2;
}

message RoutingStoV {
	uint32 Value = 1;
	uint32 To_Modify = 2;
}

message WebServiceAPIURLsendingStoV {
	bytes Value = 1;
	uint32 To_Modify = 2;
}

message WebServiceAPIURLReceivingStoV {
	bytes Value = 1; //    []rune
	uint32 To_Modify = 2; // uint32
}

message ArrayStoV {
	bytes Value = 1;
	uint32 To_Modify = 2;
}
//Setting
message Stg {
	uint32 New_Position_Report_Period = 1;
	float Speed_Threshold = 2;
}

//Position
message Pos {
	double Longitude = 1;
	double Latitude = 2;
}

message PositionRadius {
	float Longitude = 1;
	float Latitude = 2;
	float Radius = 3;
}

// Single position report Solar (0x0a), RPMA
message Sprs {
	bytes Header = 1;
	DatePosition Date_Position = 2;
	MV Move = 3;
	uint32 Period = 4;
	float BatteryVoltage = 5;
	uint32 SolarPanelVoltage = 6;
	uint32 BatteryCapacity = 7;
	uint32 Padding = 8;
	uint32 CRC = 9;

}

// Single Position report(0x06), Iridium/3G
message Spr {
bytes Header = 1;
DatePosition Date_Position = 2;
MV Move = 3;
uint32 Period = 4;
//extention bit to evaluate if the alert report hold the beacon id value
// same logic as the extention bit move
uint32 Extention_Bit_Beacon_ID = 5;
uint32 Beacon_ID = 6; 
uint32 Padding = 7;
uint32 CRC = 8;

}// History Position report(0x01), Iridium/3G
message Hpr {
bytes Header = 1;
uint32 Msg_ID = 2;
//set to 1 is the message was requested by the server not sent authomatically by the beacon
uint32 Source_Flag = 3;
//Count of total Data reports: Indicate the total quantity of data reports for this MSG_ID.
//Allow to send several reports for the same MSG_ID. Multiple reports will need to be sent if the server asks for history or 
//if communication with Iridium/GPS has been disconnected for a period of time.
//Fill to 1 if one report.
uint32 Count_Total_Data_Reports = 4;
//Count of data reports in this message: quantity of data reports in the current message.
uint32 Count_Data_Reports_in_this_Msg = 5;
//DataReport hold the historical positions reports sent by the beacon
repeated DataReport Data_Report = 6;
//extention bit to evaluate if the alert report hold the beacon id value
// same logic as the extention bit move
uint32 Extention_Bit_Beacon_ID = 7;
uint32 Beacon_ID = 8; 
//Padding and CRC are generate by the omnicom library when encoding the mssages
uint32 Padding = 9;
uint32 CRC = 10;

}

// Alert Report(0x02), Iridium/3G
message Ar {
//This message is used to report an alert.
//Automatically send if an alert occurs or after a request « request specific message ».
bytes Header = 1;
uint32 Msg_ID = 2;
//Date position reports when the position attached to this message was sampled by the gps
DatePosition Date_Position = 3;
//Date event reports when the event (alert) in this message occured
DateEvent Date_Event = 4;
//Power up alert
PowerUp Power_Up = 5;
//Power down alert
PowerDown Power_Down = 6;
//Battery alert
BatteryAlert Battery_Alert = 7;
//Intrusion alert occured when the beacon gets opened 
IntrusionAlert Intrusion_Alert = 8;
// No GPS fix alert
NoPositionFix No_Position_Fix = 9;
// No link between the junction box and the dome alert
JBDomeAlert JB_Dome_Alert = 10;
//loss of mobile com conn alert
LossMobileCom Loss_Mobile_Com = 11;
//It's not clear what this alert is; hardware team says that it's not implemented anyway.
DaylightAlert Daylight_Alert = 12;
//Assistance alert occures when you push the assistance button in the  beacon
AssistanceAlert Assistance_Alert = 13;
//Test mode alert is used to test that the beacon can reach the server.
//Occures when the beacon gets installed on a vessel the first time.
TestMode Test_Mode = 14;
//extention bit to be evaluated to determine the validity of the next field
// if Extention_Bit_Move == 0 then Move !(exist) else if Extention_Bit_Move == 1 then Move is valid 
uint32 Extention_Bit_Move = 15;
//Move is speed and heading structure
MV Move = 16;
//extention bit to evaluate if the alert report hold the beacon id value
// same logic as the extention bit move
uint32 Extention_Bit_Beacon_ID = 17;
uint32 Beacon_ID = 18;       

//generated by the omnicom library
uint32 Padding = 19;
uint32 CRC = 20;

}// Global parameters(0x03), Iridium/3G
message Gp {
bytes Header = 1;
//Hardware ID of the beacon
uint32 Beacon_ID = 2;
uint32 ID_Msg = 3;
//the date when the position was sampled
DatePosition Date_Position = 4;
//the beacon's reporting interval
PositionReportingInterval Position_Reporting_Interval = 5;
//ON/OFF geofencing
GeofencingEnable Geofencing_Enable = 6;
//frenquency of the GPS position sampling 
PositionCollectionInterval Position_Collection_Interval = 7;
//Beacon's password
Pwd Password = 8;
//Beacon's rounting (iridium or 3g or RPMA ...)
Rtg Routing = 9;
bytes Firmware_Dome_Version = 10;
bytes Junction_Box_Version = 11;
bytes SIM_Card_ICCID = 12;
bytes G3_IMEI = 13;
bytes IRI_IMEI = 14;

uint32 CRC = 15;

}// API url parameters(0x08), Iridium
message Aup {
bytes Header = 1;
uint32 ID_Msg = 2;
DatePosition Date_Position = 3;
//URL for sending data over 3g to the beacon
WebServiceAPIURLSending Web_Service_API_URL_Sending = 4;
//API for receiving data over 3g to the beacon
WebServiceAPIURLReceiving Web_Service_API_URL_Receiving = 5;
//list of messages that we want to get only using iridium from the beacon
Arr Array = 6;

//generated by the omnicom library
uint32 Padding = 7;
uint32 CRC = 8;

}// Geofencing ack(0x04), Iridium/3G
message Ga {
//Send when all geofencing packets was received by the beacon
bytes Header = 1;
//the message ID should have the same value that ID_msg in the create geofence request.
uint32 Msg_ID = 2;
DatePosition Date_Position = 3;
//0 : ok for :
//« Upload Geofence(0x035) : new record
//« Delete GEO fence(0x037) : delete succes
//1 : buffer geofence full for :
//« Upload Geofence(0x035)
//2 : no find GEO ID:
//« Delete GEO fence(0x037)
//3 : ok for :
//« Upload Geofence(0x035) : update record
uint32 Error_Type = 4;
uint32 GEO_ID = 5;

uint32 Padding = 6;
uint32 CRC = 7;

}// Binary Message(0x07), Iridium/3G
message Bm {
bytes Header = 1;
Dt Date = 2;
uint32 ID_Msg = 3;
uint32 Length_Msg_Content = 4;
bytes Msg_Content = 5;
uint32 CRC = 6;

}// Ack binary message(0x09), Iridium/3G
message Abm {
bytes Header = 1;
Dt Date = 2;
uint32 ID_Msg = 3;
uint32 Error_Type = 4;
uint32 Padding = 5;
uint32 CRC = 6;

}// Test Mode Ack(0x30), Iridium/3G
message Tma {
bytes Header = 1;
Dt Date = 2;
uint32 Padding = 3;
uint32 CRC = 4;

}// Ack assistance(0x45), Iridium/3G
message Aa {
//Header is the Ack Assistance message type identifier (0x45)
bytes Header = 1;
//Current date with Year: (0,99) /Month (0,12) /Day (0,31) /Min (0, 1439) format
Dt Date = 2;
//Padding generate by the omnicom library
uint32 Padding = 3;
//CRC generate by the omnicom library
uint32 CRC = 4;

}// Request Message History(0x31), Iridium/3G
message Rmh {
//Header is the request message history message type identifier (0x31)
bytes Header = 1;
//Current date with Year: (0,99) /Month (0,12) /Day (0,31) /Min (0, 1439) format
Dt Date = 2;
//date interval with start and stop date
DateInterval Date_Interval = 3;
//ID_msg should be generated and will be referenced in the history message. Should be equal to req id ?
uint32 ID_Msg = 4;
//Paddng is managed in the omnicom library
uint32 Padding = 5;
//CRC is managed in the omnicom library
uint32 CRC = 6;

}// Unit interval change(0x32), Iridium/3G
message Uic {
//Header is the unit interval change message type identifier (0x32)
bytes Header = 1;
//ID_msg should be generated and will be references in the history message. Should be equal to req id ?
uint32 ID_Msg = 2;
//Current date with (0,99) / Month (0,12) / Day (0,31) / Min (0, 1439) format
Dt Date = 3;
//New reporting interval in min with step of 5 and max of 1140. 
//0 is a special value that might set the beacon to sleep mode not sure if this implemented yet in the firmware
uint32 New_Reporting = 4;

//CRC is managed by the omnicom library
uint32 CRC = 5;

}// Request a specific message(0x33), Iridium/3G
message Rsm {
//Header is the request specific message type identifier (0x33)
bytes Header = 1;
uint32 ID_Msg = 2;
Dt Date = 3;
//0x00: send an alert report: message 'Alert report". Response with “Alert Report(0x02)”
//0x01: send the last position recorded with the message "History position report(0x01)".
//0x02: make a new position acquisition and send it with the message "History position report(0x01)".
//0x03: send the global parameters setting.Response with Global parameters(0x03)
//0x04: send the parameters URL. Response with API url parameters(0x08)
//0x10: test the 3G. The Dome send a “Single position report(0x06) and a History report(0x01) in a 3g message.
uint32 Msg_to_Ask = 4;
uint32 Padding = 5;
uint32 CRC = 6;

}// Update global parameters(0x34), Iridium/3G
message Ugp {
bytes Header = 1;
uint32 ID_Msg = 2;
Dt Date = 3;
//Position reporting interval: defines how often positions are acquired from GPS and reported. 
//The interval value can be overridden when a unit is within specific geofence
PositionReportingIntervalStoV Position_Reporting_Interval = 4;
//ON/OFF: enable or disable all the geofence processing in the beacon
GeofencingEnableStoV Geofencing_Enable = 5;
//the frequency of GPS position sampling while being in side a geo-fence
GeofenceStatusCheckIntervalStoV Geofence_Status_Check_Interval = 6;
//Password: Password to authenticate the dome over a 3G connection
PasswordStoV Password = 7;
// Routing determines what com channel to be used for sending message to the server
RoutingStoV Routing = 8;

uint32 Padding = 9;
uint32 CRC = 10;

}// UpdateAPI url parameters(0x3A), Iridium/3G
message Uaup {
bytes Header = 1;
uint32 ID_Msg = 2;
Dt Date = 3;

//webservice API URL for sending data over 3g
WebServiceAPIURLsendingStoV Web_Service_API_URL_Sending = 4;
//webservice API URL for receiving data over 3g
WebServiceAPIURLReceivingStoV Web_Service_API_URL_Receiving = 5;
//list of messages that we want to send using iridium only
ArrayStoV Array = 6;
uint32 Padding = 7;
uint32 CRC = 8;

}// Upload Geofence(0x35) for polygon shape, Iridium/3G
message UGPolygon {
bytes Header = 1;
uint32 Msg_ID = 2;
Dt Date = 3;
//GeoID is the zone ID 
uint32 GEO_ID = 4;
//Shape of the zone; Circle
uint32 Shape = 5;
//Name of the zone
bytes NAME = 6;
//TYPE: Type of the area (port, military, protected fishing…)
uint32 TYPE = 7;
//Priority: priority of the zone. Allows the beacon to manage priorities using rules when zones intersect.
uint32 Priority = 8;
// enable or disable the geofence
uint32 Activated = 9;
// position reporting period and speed threshold rules for when the beacon is inside the zone
Stg Setting = 10;
//Number of points in the polygone
uint32 Number_Point = 11;
repeated Pos Position = 12;
uint32 Padding = 13;
uint32 CRC = 14;

}// Upload Geofence for circle shape(0x35), Iridium/3G
message UGCircle {
bytes Header = 1;
uint32 Msg_ID = 2;
Dt Date = 3;
uint32 GEO_ID = 4;
uint32 Shape = 5;
bytes NAME = 6;
uint32 TYPE = 7;
uint32 Priority = 8;
uint32 Activated = 9;
Stg Setting = 10;
uint32 Number_Point = 11;
PositionRadius Position = 12;
uint32 Padding = 13;
uint32 CRC = 14;

}// 3G binary message notification(0x36), Iridium
message Gbmn {
//This message is used when there are a binary message to be picked up via 3G
bytes Header = 1;
Dt Date = 2;
uint32 Padding = 3;
uint32 CRC = 4;

}// Delete Geofence(0x37), Iridium/3G
message Dg {
bytes Header = 1;
uint32 Msg_ID = 2;
Dt Date = 3;
uint32 GEO_ID = 4;
uint32 Padding = 5;
uint32 CRC = 6;

}// Binary message(0x38) from server to vessels, Iridium/3G
message BMStoV {
bytes Header = 1;
Dt Date = 2;
uint32 ID_Msg = 3;
uint32 Length_Msg_Content = 4;
bytes Msg_Content = 5;
uint32 CRC = 6;

}// Update Firmware(0x39), 3G
message Uf {
bytes Header = 1;
Dt Date = 2;
uint32 ID_Msg = 3;
uint32 Firmware_Target = 4;
uint32 Flag_Last_Packet = 5;
uint32 Data_Address = 6;
uint32 Data_Size = 7;
uint32 Padding1 = 8;
bytes Firmware_Data = 9;
uint32 CRC = 10;






//Messages used only by the backend

}// Split packet message(0x40), Iridium
message Spm {
bytes Header = 1;
uint64 Split_Msg_ID = 2;
uint32 Packet_Number = 3;
uint32 Packets_Total_Count = 4;
uint32 Length_Msg_Data_Part_in_Byte = 5;
uint32 Padding1 = 6;
bytes Msg_Data_Part = 7;
uint32 CRC = 8;

}// Split diagonostic request(0x41), Iridium
message Sdr {
bytes Header = 1;
Dt Date = 2;
uint64 Split_Msg_ID = 3;
uint32 Padding = 4;
uint32 CRC = 5;

}// Split message diagnostic response (0x05), Iridium
message Smdr {
bytes Header = 1;
uint64 Split_Msg_ID = 2;
uint32 Packets_Expected_Total_Count = 3;
uint32 Missing_Packets_Total_Count = 4;
bytes List_Missing_Packets = 5;
uint32 CRC = 6;

}
