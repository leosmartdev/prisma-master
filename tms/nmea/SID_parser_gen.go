// Code generated by parse_nmea; DO NOT EDIT
package nmea

import "fmt"
import "strings"
import "strconv"

const (
	// PrefixSID prefix
	PrefixSID = "SID"
)

// SID represents fix data.
type CoreSID struct {
	StationID string

	StationIDValidity bool

	NewStationID string

	NewStationIDValidity bool

	Mmsi uint32

	MmsiValidity bool

	NewMmsi uint32

	NewMmsiValidity bool

	Status string

	StatusValidity bool
}

type SID struct {
	BaseSentence
	CoreSID
}

func NewSID(sentence BaseSentence) *SID {
	s := new(SID)
	s.BaseSentence = sentence

	s.StationIDValidity = false

	s.NewStationIDValidity = false

	s.MmsiValidity = false

	s.NewMmsiValidity = false

	s.StatusValidity = false

	return s
}

func (s *SID) parse() error {
	var err error

	if s.Format != PrefixSID {
		err = fmt.Errorf("%s is not a %s", s.Format, PrefixSID)
		return err
	}

	if len(s.Fields) == 0 {
		return nil
	} else {
		if s.Fields[0] != "" {
			s.StationID = s.Fields[0]
			s.StationIDValidity = true
		}
	}

	if len(s.Fields) == 1 {
		return nil
	} else {
		if s.Fields[1] != "" {
			s.NewStationID = s.Fields[1]
			s.NewStationIDValidity = true
		}
	}

	if len(s.Fields) == 2 {
		return nil
	} else {
		if s.Fields[2] != "" {
			i, err := strconv.ParseUint(s.Fields[2], 10, 32)
			if err != nil {
				return fmt.Errorf("SID decode variation error: %s", s.Fields[2])
			} else {
				s.CoreSID.Mmsi = uint32(i)
				s.CoreSID.MmsiValidity = true
			}

		}
	}

	if len(s.Fields) == 3 {
		return nil
	} else {
		if s.Fields[3] != "" {
			i, err := strconv.ParseUint(s.Fields[3], 10, 32)
			if err != nil {
				return fmt.Errorf("SID decode variation error: %s", s.Fields[3])
			} else {
				s.CoreSID.NewMmsi = uint32(i)
				s.CoreSID.NewMmsiValidity = true
			}

		}
	}

	if len(s.Fields) == 4 {
		return nil
	} else {
		if s.Fields[4] != "" {
			s.Status = s.Fields[4]
			s.StatusValidity = true
		}
	}

	return nil
}

func (s *SID) Encode() (string, error) {
	var Raw string

	if s.Format != PrefixSID {
		err := fmt.Errorf("Sentence format %s is not a SID sentence", s.Format)
		return "", err
	}

	Raw = s.SOS + s.Talker + s.Format

	if s.StationIDValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreSID.StationID

		} else {
			Raw = Raw + "," + s.CoreSID.StationID
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.NewStationIDValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreSID.NewStationID

		} else {
			Raw = Raw + "," + s.CoreSID.NewStationID
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.MmsiValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreSID.Mmsi), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreSID.Mmsi), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.NewMmsiValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreSID.NewMmsi), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreSID.NewMmsi), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.StatusValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreSID.Status

		} else {
			Raw = Raw + "," + s.CoreSID.Status
		}
	}

	check := Checksum(Raw)

	Raw = Raw + check

	return Raw, nil

}
