// Code generated by parse_nmea; DO NOT EDIT
package nmea

import "fmt"
import "strings"
import "strconv"

const (
	// PrefixTS prefix
	PrefixTS = "TS"
)

// TS represents fix data.
type CoreTS struct {
	TrackID uint32

	TrackIDValidity bool

	TrackSize uint32

	TrackSizeValidity bool
}

type TS struct {
	BaseSentence
	CoreTS
}

func NewTS(sentence BaseSentence) *TS {
	s := new(TS)
	s.BaseSentence = sentence

	s.TrackIDValidity = false

	s.TrackSizeValidity = false

	return s
}

func (s *TS) parse() error {
	var err error

	if s.Format != PrefixTS {
		err = fmt.Errorf("%s is not a %s", s.Format, PrefixTS)
		return err
	}

	if len(s.Fields) == 0 {
		return nil
	} else {
		if s.Fields[0] != "" {
			i, err := strconv.ParseUint(s.Fields[0], 10, 32)
			if err != nil {
				return fmt.Errorf("TS decode variation error: %s", s.Fields[0])
			} else {
				s.CoreTS.TrackID = uint32(i)
				s.CoreTS.TrackIDValidity = true
			}

		}
	}

	if len(s.Fields) == 1 {
		return nil
	} else {
		if s.Fields[1] != "" {
			i, err := strconv.ParseUint(s.Fields[1], 10, 32)
			if err != nil {
				return fmt.Errorf("TS decode variation error: %s", s.Fields[1])
			} else {
				s.CoreTS.TrackSize = uint32(i)
				s.CoreTS.TrackSizeValidity = true
			}

		}
	}

	return nil
}

func (s *TS) Encode() (string, error) {
	var Raw string

	if s.Format != PrefixTS {
		err := fmt.Errorf("Sentence format %s is not a TS sentence", s.Format)
		return "", err
	}

	Raw = s.SOS + s.Talker + s.Format

	if s.TrackIDValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTS.TrackID), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTS.TrackID), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.TrackSizeValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTS.TrackSize), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTS.TrackSize), 10)
		}

	}

	check := Checksum(Raw)

	Raw = Raw + check

	return Raw, nil

}
