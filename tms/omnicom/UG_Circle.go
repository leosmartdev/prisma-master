//Upload Geofence for circle shape(0x35), Iridium/3G
// Code generated by omnicom; DO NOT EDIT
package omnicom

import (
	"errors"
	"strconv"
)

type UG_Circle struct {
	Header       byte
	Msg_ID       uint32
	Date         Date
	GEO_ID       uint32
	Shape        uint32
	NAME         []byte
	TYPE         uint32
	Priority     uint32
	Activated    uint32
	Setting      Setting
	Number_Point uint32
	Position     Position_Radius
	Padding      uint32
	CRC          uint32
}

func (UG_Circle *UG_Circle) Parse(input string) error {
	var err error
	if len(input) > 344 {
		err = errors.New("Input message is longer than limit")
		return err
	}
	var count int = 0
	if count+8 > len(input) {
		err = errors.New("Input message length of UG_Circle is shorter than required")
		return err
	}
	count = count + 8
	var num uint64
	if count+12 > len(input) {
		err = errors.New("Input message length of UG_Circle is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+12], 2, 32)
	UG_Circle.Msg_ID = uint32(num*1 - 0)
	count = count + 12
	if err != nil {
		return err
	}
	if count+27 > len(input) {
		err = errors.New("Input message length of UG_Circle is shorter than required")
		return err
	}
	UG_Circle.Date = *new(Date)
	err = UG_Circle.Date.parse(input[count : count+27])
	count = count + 27
	if err != nil {
		return err
	}
	if count+32 > len(input) {
		err = errors.New("Input message length of UG_Circle is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+32], 2, 32)
	UG_Circle.GEO_ID = uint32(num*1 - 0)
	count = count + 32
	if err != nil {
		return err
	}
	if count+1 > len(input) {
		err = errors.New("Input message length of UG_Circle is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+1], 2, 32)
	UG_Circle.Shape = uint32(num*1 - 0)
	count = count + 1
	if err != nil {
		return err
	}
	if count+160 > len(input) {
		err = errors.New("Input message length of UG_Circle is shorter than required")
		return err
	}
	UG_Circle.NAME, err = decodeToByte(input[count : count+160])
	count = count + 160
	if err != nil {
		return err
	}
	if count+8 > len(input) {
		err = errors.New("Input message length of UG_Circle is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+8], 2, 32)
	UG_Circle.TYPE = uint32(num*1 - 0)
	count = count + 8
	if err != nil {
		return err
	}
	if count+2 > len(input) {
		err = errors.New("Input message length of UG_Circle is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+2], 2, 32)
	UG_Circle.Priority = uint32(num*1 - 0)
	count = count + 2
	if err != nil {
		return err
	}
	if count+1 > len(input) {
		err = errors.New("Input message length of UG_Circle is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+1], 2, 32)
	UG_Circle.Activated = uint32(num*1 - 0)
	count = count + 1
	if err != nil {
		return err
	}
	if count+17 > len(input) {
		err = errors.New("Input message length of UG_Circle is shorter than required")
		return err
	}
	UG_Circle.Setting = *new(Setting)
	err = UG_Circle.Setting.parse(input[count : count+17])
	count = count + 17
	if err != nil {
		return err
	}
	if count+7 > len(input) {
		err = errors.New("Input message length of UG_Circle is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+7], 2, 32)
	UG_Circle.Number_Point = uint32(num*1 - 0)
	count = count + 7
	if err != nil {
		return err
	}
	if count+54 > len(input) {
		err = errors.New("Input message length of UG_Circle is shorter than required")
		return err
	}
	UG_Circle.Position = *new(Position_Radius)
	err = UG_Circle.Position.parse(input[count : count+54])
	count = count + 54
	if err != nil {
		return err
	}
	if count+(8-count%8) > len(input) {
		err = errors.New("Input message length of UG_Circle is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+(8-count%8)], 2, 32)
	UG_Circle.Padding = uint32(num*1 - 0)
	count = count + (8 - count%8)
	if err != nil {
		return err
	}
	if count+8 > len(input) {
		err = errors.New("Input message length of UG_Circle is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+8], 2, 32)
	UG_Circle.CRC = uint32(num*1 - 0)
	count = count + 8
	if err != nil {
		return err
	}
	return err
}
func (UG_Circle *UG_Circle) Encode() ([]byte, error) {
	var str string
	var s string
	var err error
	str += pad(strconv.FormatUint(uint64(UG_Circle.Header), 2), 8)
	s = pad(strconv.FormatUint(uint64((UG_Circle.Msg_ID+0)/1), 2), 12)
	if len(s) > 12 {
		err = errors.New("Value assigned for UG_Circle.Msg_ID exceeds limit")
		return []byte{}, err
	}
	str += s

	s, err = UG_Circle.Date.encode()
	if err != nil {
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((UG_Circle.GEO_ID+0)/1), 2), 32)
	if len(s) > 32 {
		err = errors.New("Value assigned for UG_Circle.GEO_ID exceeds limit")
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((UG_Circle.Shape+0)/1), 2), 1)
	if len(s) > 1 {
		err = errors.New("Value assigned for UG_Circle.Shape exceeds limit")
		return []byte{}, err
	}
	str += s

	s, err = encodeFromByte(UG_Circle.NAME, 160)
	if err != nil {
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((UG_Circle.TYPE+0)/1), 2), 8)
	if len(s) > 8 {
		err = errors.New("Value assigned for UG_Circle.TYPE exceeds limit")
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((UG_Circle.Priority+0)/1), 2), 2)
	if len(s) > 2 {
		err = errors.New("Value assigned for UG_Circle.Priority exceeds limit")
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((UG_Circle.Activated+0)/1), 2), 1)
	if len(s) > 1 {
		err = errors.New("Value assigned for UG_Circle.Activated exceeds limit")
		return []byte{}, err
	}
	str += s

	s, err = UG_Circle.Setting.encode()
	if err != nil {
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((UG_Circle.Number_Point+0)/1), 2), 7)
	if len(s) > 7 {
		err = errors.New("Value assigned for UG_Circle.Number_Point exceeds limit")
		return []byte{}, err
	}
	str += s

	s, err = UG_Circle.Position.encode()
	if err != nil {
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((UG_Circle.Padding+0)/1), 2), 8-len(str)%8)
	if len(s) > (8 - len(str)%8) {
		err = errors.New("Value assigned for UG_Circle.Padding exceeds limit")
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((UG_Circle.CRC+0)/1), 2), 8)
	if len(s) > 8 {
		err = errors.New("Value assigned for UG_Circle.CRC exceeds limit")
		return []byte{}, err
	}
	str += s

	str = attachCRC(str)
	byteList, err := decToByte(str)
	return byteList, err
}
func (UG_Circle *UG_Circle) getHeader() byte {
	return UG_Circle.Header
}
func (UG_Circle *UG_Circle) getCRC() uint32 {
	return UG_Circle.CRC
}
func (UG_Circle *UG_Circle) setCRC(crc uint32) {
	UG_Circle.CRC = crc
}
