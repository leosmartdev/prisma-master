//Split message diagnostic response (0x05), Iridium
// Code generated by omnicom; DO NOT EDIT
package omnicom

import (
	"errors"
	"strconv"
)

type SMDR struct {
	Header                       byte
	Split_Msg_ID                 uint64
	Packets_Expected_Total_Count uint32
	Missing_Packets_Total_Count  uint32
	List_Missing_Packets         []byte
	CRC                          uint32
}

func (SMDR *SMDR) Parse(input string) error {
	var err error
	if len(input) > 2160 {
		err = errors.New("Input message is longer than limit")
		return err
	}
	var count int = 0
	if count+8 > len(input) {
		err = errors.New("Input message length of SMDR is shorter than required")
		return err
	}
	count = count + 8
	var num uint64
	if count+64 > len(input) {
		err = errors.New("Input message length of SMDR is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+64], 2, 32)
	SMDR.Split_Msg_ID = num*1 - 0
	count = count + 64
	if err != nil {
		return err
	}
	if count+8 > len(input) {
		err = errors.New("Input message length of SMDR is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+8], 2, 32)
	SMDR.Packets_Expected_Total_Count = uint32(num*1 - 0)
	count = count + 8
	if err != nil {
		return err
	}
	if count+8 > len(input) {
		err = errors.New("Input message length of SMDR is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+8], 2, 32)
	SMDR.Missing_Packets_Total_Count = uint32(num*1 - 0)
	count = count + 8
	if err != nil {
		return err
	}
	if count+int(SMDR.Missing_Packets_Total_Count)*8 > len(input) {
		err = errors.New("Input message length of SMDR is shorter than required")
		return err
	}
	if 1392 < int(SMDR.Missing_Packets_Total_Count)*8 {
		err = errors.New("SMDR.Missing_Packets_Total_Count is larger than limit")
		return err
	}
	SMDR.List_Missing_Packets, err = decodeToByte(input[count : count+int(SMDR.Missing_Packets_Total_Count)*8])
	count = count + int(SMDR.Missing_Packets_Total_Count)*8
	if err != nil {
		return err
	}
	if count+8 > len(input) {
		err = errors.New("Input message length of SMDR is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+8], 2, 32)
	SMDR.CRC = uint32(num*1 - 0)
	count = count + 8
	if err != nil {
		return err
	}
	return err
}
func (SMDR *SMDR) Encode() ([]byte, error) {
	var str string
	var s string
	var err error
	str += pad(strconv.FormatUint(uint64(SMDR.Header), 2), 8)
	s = pad(strconv.FormatUint(((SMDR.Split_Msg_ID+0)/1), 2), 64)
	if len(s) > 64 {
		err = errors.New("Value assigned for SMDR.Split_Msg_ID exceeds limit")
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((SMDR.Packets_Expected_Total_Count+0)/1), 2), 8)
	if len(s) > 8 {
		err = errors.New("Value assigned for SMDR.Packets_Expected_Total_Count exceeds limit")
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((SMDR.Missing_Packets_Total_Count+0)/1), 2), 8)
	if len(s) > 8 {
		err = errors.New("Value assigned for SMDR.Missing_Packets_Total_Count exceeds limit")
		return []byte{}, err
	}
	str += s

	if 1392 < int(SMDR.Missing_Packets_Total_Count)*8 {
		err = errors.New("SMDR.Missing_Packets_Total_Count is larger than limit")
		return []byte{}, err
	}
	s, err = encodeFromByte(SMDR.List_Missing_Packets, int(SMDR.Missing_Packets_Total_Count)*8)
	if err != nil {
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((SMDR.CRC+0)/1), 2), 8)
	if len(s) > 8 {
		err = errors.New("Value assigned for SMDR.CRC exceeds limit")
		return []byte{}, err
	}
	str += s

	str = attachCRC(str)
	byteList, err := decToByte(str)
	return byteList, err
}
func (SMDR *SMDR) getHeader() byte {
	return SMDR.Header
}
func (SMDR *SMDR) getCRC() uint32 {
	return SMDR.CRC
}
func (SMDR *SMDR) setCRC(crc uint32) {
	SMDR.CRC = crc
}
