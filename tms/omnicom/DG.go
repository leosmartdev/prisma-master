//Delete Geofence(0x37), Iridium/3G
// Code generated by omnicom; DO NOT EDIT
package omnicom

import (
	"errors"
	"strconv"
)

type DG struct {
	Header  byte
	Msg_ID  uint32
	Date    Date
	GEO_ID  uint32
	Padding uint32
	CRC     uint32
}

func (DG *DG) Parse(input string) error {
	var err error
	if len(input) > 88 {
		err = errors.New("Input message is longer than limit")
		return err
	}
	var count int = 0
	if count+8 > len(input) {
		err = errors.New("Input message length of DG is shorter than required")
		return err
	}
	count = count + 8
	var num uint64
	if count+12 > len(input) {
		err = errors.New("Input message length of DG is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+12], 2, 32)
	DG.Msg_ID = uint32(num*1 - 0)
	count = count + 12
	if err != nil {
		return err
	}
	if count+27 > len(input) {
		err = errors.New("Input message length of DG is shorter than required")
		return err
	}
	DG.Date = *new(Date)
	err = DG.Date.parse(input[count : count+27])
	count = count + 27
	if err != nil {
		return err
	}
	if count+32 > len(input) {
		err = errors.New("Input message length of DG is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+32], 2, 32)
	DG.GEO_ID = uint32(num*1 - 0)
	count = count + 32
	if err != nil {
		return err
	}
	if count+(8-count%8) > len(input) {
		err = errors.New("Input message length of DG is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+(8-count%8)], 2, 32)
	DG.Padding = uint32(num*1 - 0)
	count = count + (8 - count%8)
	if err != nil {
		return err
	}
	if count+8 > len(input) {
		err = errors.New("Input message length of DG is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+8], 2, 32)
	DG.CRC = uint32(num*1 - 0)
	count = count + 8
	if err != nil {
		return err
	}
	return err
}
func (DG *DG) Encode() ([]byte, error) {
	var str string
	var s string
	var err error
	str += pad(strconv.FormatUint(uint64(DG.Header), 2), 8)
	s = pad(strconv.FormatUint(uint64((DG.Msg_ID+0)/1), 2), 12)
	if len(s) > 12 {
		err = errors.New("Value assigned for DG.Msg_ID exceeds limit")
		return []byte{}, err
	}
	str += s

	s, err = DG.Date.encode()
	if err != nil {
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((DG.GEO_ID+0)/1), 2), 32)
	if len(s) > 32 {
		err = errors.New("Value assigned for DG.GEO_ID exceeds limit")
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((DG.Padding+0)/1), 2), 8-len(str)%8)
	if len(s) > (8 - len(str)%8) {
		err = errors.New("Value assigned for DG.Padding exceeds limit")
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((DG.CRC+0)/1), 2), 8)
	if len(s) > 8 {
		err = errors.New("Value assigned for DG.CRC exceeds limit")
		return []byte{}, err
	}
	str += s

	str = attachCRC(str)
	byteList, err := decToByte(str)
	return byteList, err
}
func (DG *DG) getHeader() byte {
	return DG.Header
}
func (DG *DG) getCRC() uint32 {
	return DG.CRC
}
func (DG *DG) setCRC(crc uint32) {
	DG.CRC = crc
}
