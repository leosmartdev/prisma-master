// Code generated by parse_nmea; DO NOT EDIT
package nmea

import "fmt"
import "strings"
import "strconv"

const (
	// PrefixGGA prefix
	PrefixGGA = "GGA"
)

// GGA represents fix data.
type CoreGGA struct {
	UtcTime float64

	UtcTimeValidity bool

	Latitude float64

	LatitudeValidity bool

	LatitudeDirection string

	LatitudeDirectionValidity bool

	Longitude float64

	LongitudeValidity bool

	LongitudeDirection string

	LongitudeDirectionValidity bool

	Status string

	StatusValidity bool

	SatelliteCount uint32

	SatelliteCountValidity bool

	Hdop float64

	HdopValidity bool

	AntennaAltitude float64

	AntennaAltitudeValidity bool

	M1 string

	M1Validity bool

	GeoidalSeparation float64

	GeoidalSeparationValidity bool

	M2 string

	M2Validity bool

	DgpsAge uint32

	DgpsAgeValidity bool

	DgpsID uint32

	DgpsIDValidity bool
}

type GGA struct {
	BaseSentence
	CoreGGA
}

func NewGGA(sentence BaseSentence) *GGA {
	s := new(GGA)
	s.BaseSentence = sentence

	s.UtcTimeValidity = false

	s.LatitudeValidity = false

	s.LatitudeDirectionValidity = false

	s.LongitudeValidity = false

	s.LongitudeDirectionValidity = false

	s.StatusValidity = false

	s.SatelliteCountValidity = false

	s.HdopValidity = false

	s.AntennaAltitudeValidity = false

	s.M1Validity = false

	s.GeoidalSeparationValidity = false

	s.M2Validity = false

	s.DgpsAgeValidity = false

	s.DgpsIDValidity = false

	return s
}

func (s *GGA) parse() error {
	var err error

	if s.Format != PrefixGGA {
		err = fmt.Errorf("%s is not a %s", s.Format, PrefixGGA)
		return err
	}

	if len(s.Fields) == 0 {
		return nil
	} else {
		if s.Fields[0] != "" {
			i, err := strconv.ParseFloat(s.Fields[0], 64)
			if err != nil {
				return fmt.Errorf("GGA decode variation error: %s", s.Fields[0])
			} else {
				s.CoreGGA.UtcTime = float64(i)
				s.CoreGGA.UtcTimeValidity = true
			}

		}
	}

	if len(s.Fields) == 1 {
		return nil
	} else {
		if s.Fields[1] != "" {
			i, err := strconv.ParseFloat(s.Fields[1], 64)
			if err != nil {
				return fmt.Errorf("GGA decode variation error: %s", s.Fields[1])
			} else {
				s.CoreGGA.Latitude = float64(i)
				s.CoreGGA.LatitudeValidity = true
			}

		}
	}

	if len(s.Fields) == 2 {
		return nil
	} else {
		if s.Fields[2] != "" {
			s.LatitudeDirection = s.Fields[2]
			s.LatitudeDirectionValidity = true
		}
	}

	if len(s.Fields) == 3 {
		return nil
	} else {
		if s.Fields[3] != "" {
			i, err := strconv.ParseFloat(s.Fields[3], 64)
			if err != nil {
				return fmt.Errorf("GGA decode variation error: %s", s.Fields[3])
			} else {
				s.CoreGGA.Longitude = float64(i)
				s.CoreGGA.LongitudeValidity = true
			}

		}
	}

	if len(s.Fields) == 4 {
		return nil
	} else {
		if s.Fields[4] != "" {
			s.LongitudeDirection = s.Fields[4]
			s.LongitudeDirectionValidity = true
		}
	}

	if len(s.Fields) == 5 {
		return nil
	} else {
		if s.Fields[5] != "" {
			s.Status = s.Fields[5]
			s.StatusValidity = true
		}
	}

	if len(s.Fields) == 6 {
		return nil
	} else {
		if s.Fields[6] != "" {
			i, err := strconv.ParseUint(s.Fields[6], 10, 32)
			if err != nil {
				return fmt.Errorf("GGA decode variation error: %s", s.Fields[6])
			} else {
				s.CoreGGA.SatelliteCount = uint32(i)
				s.CoreGGA.SatelliteCountValidity = true
			}

		}
	}

	if len(s.Fields) == 7 {
		return nil
	} else {
		if s.Fields[7] != "" {
			i, err := strconv.ParseFloat(s.Fields[7], 64)
			if err != nil {
				return fmt.Errorf("GGA decode variation error: %s", s.Fields[7])
			} else {
				s.CoreGGA.Hdop = float64(i)
				s.CoreGGA.HdopValidity = true
			}

		}
	}

	if len(s.Fields) == 8 {
		return nil
	} else {
		if s.Fields[8] != "" {
			i, err := strconv.ParseFloat(s.Fields[8], 64)
			if err != nil {
				return fmt.Errorf("GGA decode variation error: %s", s.Fields[8])
			} else {
				s.CoreGGA.AntennaAltitude = float64(i)
				s.CoreGGA.AntennaAltitudeValidity = true
			}

		}
	}

	if len(s.Fields) == 9 {
		return nil
	} else {
		if s.Fields[9] != "" {
			s.M1 = s.Fields[9]
			s.M1Validity = true
		}
	}

	if len(s.Fields) == 10 {
		return nil
	} else {
		if s.Fields[10] != "" {
			i, err := strconv.ParseFloat(s.Fields[10], 64)
			if err != nil {
				return fmt.Errorf("GGA decode variation error: %s", s.Fields[10])
			} else {
				s.CoreGGA.GeoidalSeparation = float64(i)
				s.CoreGGA.GeoidalSeparationValidity = true
			}

		}
	}

	if len(s.Fields) == 11 {
		return nil
	} else {
		if s.Fields[11] != "" {
			s.M2 = s.Fields[11]
			s.M2Validity = true
		}
	}

	if len(s.Fields) == 12 {
		return nil
	} else {
		if s.Fields[12] != "" {
			i, err := strconv.ParseUint(s.Fields[12], 10, 32)
			if err != nil {
				return fmt.Errorf("GGA decode variation error: %s", s.Fields[12])
			} else {
				s.CoreGGA.DgpsAge = uint32(i)
				s.CoreGGA.DgpsAgeValidity = true
			}

		}
	}

	if len(s.Fields) == 13 {
		return nil
	} else {
		if s.Fields[13] != "" {
			i, err := strconv.ParseUint(s.Fields[13], 10, 32)
			if err != nil {
				return fmt.Errorf("GGA decode variation error: %s", s.Fields[13])
			} else {
				s.CoreGGA.DgpsID = uint32(i)
				s.CoreGGA.DgpsIDValidity = true
			}

		}
	}

	return nil
}

func (s *GGA) Encode() (string, error) {
	var Raw string

	if s.Format != PrefixGGA {
		err := fmt.Errorf("Sentence format %s is not a GGA sentence", s.Format)
		return "", err
	}

	Raw = s.SOS + s.Talker + s.Format

	if s.UtcTimeValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreGGA.UtcTime, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreGGA.UtcTime, 'f', -1, 64)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.LatitudeValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreGGA.Latitude, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreGGA.Latitude, 'f', -1, 64)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.LatitudeDirectionValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreGGA.LatitudeDirection

		} else {
			Raw = Raw + "," + s.CoreGGA.LatitudeDirection
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.LongitudeValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreGGA.Longitude, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreGGA.Longitude, 'f', -1, 64)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.LongitudeDirectionValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreGGA.LongitudeDirection

		} else {
			Raw = Raw + "," + s.CoreGGA.LongitudeDirection
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.StatusValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreGGA.Status

		} else {
			Raw = Raw + "," + s.CoreGGA.Status
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.SatelliteCountValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreGGA.SatelliteCount), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreGGA.SatelliteCount), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.HdopValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreGGA.Hdop, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreGGA.Hdop, 'f', -1, 64)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.AntennaAltitudeValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreGGA.AntennaAltitude, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreGGA.AntennaAltitude, 'f', -1, 64)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.M1Validity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreGGA.M1

		} else {
			Raw = Raw + "," + s.CoreGGA.M1
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.GeoidalSeparationValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreGGA.GeoidalSeparation, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreGGA.GeoidalSeparation, 'f', -1, 64)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.M2Validity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreGGA.M2

		} else {
			Raw = Raw + "," + s.CoreGGA.M2
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.DgpsAgeValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreGGA.DgpsAge), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreGGA.DgpsAge), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.DgpsIDValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreGGA.DgpsID), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreGGA.DgpsID), 10)
		}

	}

	check := Checksum(Raw)

	Raw = Raw + check

	return Raw, nil

}
