// Code generated by parse_nmea; DO NOT EDIT
package nmea

import "fmt"
import "strings"
import "strconv"

const (
	// PrefixTSR prefix
	PrefixTSR = "TSR"
)

// TSR represents fix data.
type CoreTSR struct {
	StationID string

	StationIDValidity bool

	TspSeqMsgID uint32

	TspSeqMsgIDValidity bool

	TspChannel string

	TspChannelValidity bool

	TspUtcTime float64

	TspUtcTimeValidity bool

	Status uint32

	StatusValidity bool
}

type TSR struct {
	BaseSentence
	CoreTSR
}

func NewTSR(sentence BaseSentence) *TSR {
	s := new(TSR)
	s.BaseSentence = sentence

	s.StationIDValidity = false

	s.TspSeqMsgIDValidity = false

	s.TspChannelValidity = false

	s.TspUtcTimeValidity = false

	s.StatusValidity = false

	return s
}

func (s *TSR) parse() error {
	var err error

	if s.Format != PrefixTSR {
		err = fmt.Errorf("%s is not a %s", s.Format, PrefixTSR)
		return err
	}

	if len(s.Fields) == 0 {
		return nil
	} else {
		if s.Fields[0] != "" {
			s.StationID = s.Fields[0]
			s.StationIDValidity = true
		}
	}

	if len(s.Fields) == 1 {
		return nil
	} else {
		if s.Fields[1] != "" {
			i, err := strconv.ParseUint(s.Fields[1], 10, 32)
			if err != nil {
				return fmt.Errorf("TSR decode variation error: %s", s.Fields[1])
			} else {
				s.CoreTSR.TspSeqMsgID = uint32(i)
				s.CoreTSR.TspSeqMsgIDValidity = true
			}

		}
	}

	if len(s.Fields) == 2 {
		return nil
	} else {
		if s.Fields[2] != "" {
			s.TspChannel = s.Fields[2]
			s.TspChannelValidity = true
		}
	}

	if len(s.Fields) == 3 {
		return nil
	} else {
		if s.Fields[3] != "" {
			i, err := strconv.ParseFloat(s.Fields[3], 64)
			if err != nil {
				return fmt.Errorf("TSR decode variation error: %s", s.Fields[3])
			} else {
				s.CoreTSR.TspUtcTime = float64(i)
				s.CoreTSR.TspUtcTimeValidity = true
			}

		}
	}

	if len(s.Fields) == 4 {
		return nil
	} else {
		if s.Fields[4] != "" {
			i, err := strconv.ParseUint(s.Fields[4], 10, 32)
			if err != nil {
				return fmt.Errorf("TSR decode variation error: %s", s.Fields[4])
			} else {
				s.CoreTSR.Status = uint32(i)
				s.CoreTSR.StatusValidity = true
			}

		}
	}

	return nil
}

func (s *TSR) Encode() (string, error) {
	var Raw string

	if s.Format != PrefixTSR {
		err := fmt.Errorf("Sentence format %s is not a TSR sentence", s.Format)
		return "", err
	}

	Raw = s.SOS + s.Talker + s.Format

	if s.StationIDValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreTSR.StationID

		} else {
			Raw = Raw + "," + s.CoreTSR.StationID
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.TspSeqMsgIDValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTSR.TspSeqMsgID), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTSR.TspSeqMsgID), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.TspChannelValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreTSR.TspChannel

		} else {
			Raw = Raw + "," + s.CoreTSR.TspChannel
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.TspUtcTimeValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreTSR.TspUtcTime, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreTSR.TspUtcTime, 'f', -1, 64)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.StatusValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTSR.Status), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreTSR.Status), 10)
		}

	}

	check := Checksum(Raw)

	Raw = Raw + check

	return Raw, nil

}
