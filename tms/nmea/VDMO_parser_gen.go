// Code generated by parse_nmea; DO NOT EDIT
package nmea

import "fmt"
import "strings"
import "strconv"

const (
	// VDM prefix
	PrefixVDM = "VDM"
	// VDO prefix
	PrefixVDO = "VDO"
)

// VDMO represents fix data.
type CoreVDMO struct {
	SentenceCount uint32

	SentenceCountValidity bool

	SentenceIndex uint32

	SentenceIndexValidity bool

	SeqMsgID uint32

	SeqMsgIDValidity bool

	Channel string

	ChannelValidity bool

	EncapData string

	EncapDataValidity bool

	FillBits uint32

	FillBitsValidity bool
}

type VDMO struct {
	BaseSentence
	CoreVDMO
}

func NewVDMO(sentence BaseSentence) *VDMO {
	s := new(VDMO)
	s.BaseSentence = sentence

	s.SentenceCountValidity = false

	s.SentenceIndexValidity = false

	s.SeqMsgIDValidity = false

	s.ChannelValidity = false

	s.EncapDataValidity = false

	s.FillBitsValidity = false

	return s
}

func (s *VDMO) parse() error {
	var err error

	if s.Format != PrefixVDM && s.Format != PrefixVDO {
		err = fmt.Errorf("%s is not a %s or %s", s.Format, PrefixVDO, PrefixVDM)
		return err
	}

	if len(s.Fields) == 0 {
		return nil
	} else {
		if s.Fields[0] != "" {
			i, err := strconv.ParseUint(s.Fields[0], 10, 32)
			if err != nil {
				return fmt.Errorf("VDMO decode variation error: %s", s.Fields[0])
			} else {
				s.CoreVDMO.SentenceCount = uint32(i)
				s.CoreVDMO.SentenceCountValidity = true
			}

		}
	}

	if len(s.Fields) == 1 {
		return nil
	} else {
		if s.Fields[1] != "" {
			i, err := strconv.ParseUint(s.Fields[1], 10, 32)
			if err != nil {
				return fmt.Errorf("VDMO decode variation error: %s", s.Fields[1])
			} else {
				s.CoreVDMO.SentenceIndex = uint32(i)
				s.CoreVDMO.SentenceIndexValidity = true
			}

		}
	}

	if len(s.Fields) == 2 {
		return nil
	} else {
		if s.Fields[2] != "" {
			i, err := strconv.ParseUint(s.Fields[2], 10, 32)
			if err != nil {
				return fmt.Errorf("VDMO decode variation error: %s", s.Fields[2])
			} else {
				s.CoreVDMO.SeqMsgID = uint32(i)
				s.CoreVDMO.SeqMsgIDValidity = true
			}

		}
	}

	if len(s.Fields) == 3 {
		return nil
	} else {
		if s.Fields[3] != "" {
			s.Channel = s.Fields[3]
			s.ChannelValidity = true
		}
	}

	if len(s.Fields) == 4 {
		return nil
	} else {
		if s.Fields[4] != "" {
			s.EncapData = s.Fields[4]
			s.EncapDataValidity = true
		}
	}

	if len(s.Fields) == 5 {
		return nil
	} else {
		if s.Fields[5] != "" {
			i, err := strconv.ParseUint(s.Fields[5], 10, 32)
			if err != nil {
				return fmt.Errorf("VDMO decode variation error: %s", s.Fields[5])
			} else {
				s.CoreVDMO.FillBits = uint32(i)
				s.CoreVDMO.FillBitsValidity = true
			}

		}
	}

	return nil
}

func (s *VDMO) Encode() (string, error) {
	var Raw string

	if s.Format != PrefixVDM && s.Format != PrefixVDO {
		err := fmt.Errorf("Sentence format %s is not a VDM or VDO sentence", s.Format)
		return "", err
	}

	Raw = s.SOS + s.Talker + s.Format

	if s.SentenceCountValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreVDMO.SentenceCount), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreVDMO.SentenceCount), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.SentenceIndexValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreVDMO.SentenceIndex), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreVDMO.SentenceIndex), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.SeqMsgIDValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreVDMO.SeqMsgID), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreVDMO.SeqMsgID), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.ChannelValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreVDMO.Channel

		} else {
			Raw = Raw + "," + s.CoreVDMO.Channel
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.EncapDataValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreVDMO.EncapData

		} else {
			Raw = Raw + "," + s.CoreVDMO.EncapData
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.FillBitsValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreVDMO.FillBits), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreVDMO.FillBits), 10)
		}

	}

	check := Checksum(Raw)

	Raw = Raw + check

	return Raw, nil

}
