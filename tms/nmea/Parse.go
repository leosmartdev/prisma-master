// Code generated by parse_nmea; DO NOT EDIT
package nmea

import "fmt"

// Parse parses the given string into the correct sentence type.
func ParseArray(s []string) (Sentence, error, int) {
	sentence := BaseSentence{}
	if err := sentence.parse(s[0]); err != nil {
		return nil, err, -1
	}
	if sentence.Format == PrefixQ {
		Q := NewQ(sentence)
		if err := Q.parse(); err != nil {
			return nil, err, -1
		}
		return Q, nil, 1
	}

	if sentence.Format == PrefixABK {
		ABK := NewABK(sentence)
		if err := ABK.parse(); err != nil {
			return nil, err, -1
		}
		return ABK, nil, 1
	}

	if sentence.Format == PrefixABM {
		ABM := NewABM(sentence)
		if err := ABM.parse(); err != nil {
			return nil, err, -1
		}
		return ABM, nil, 1
	}

	if sentence.Format == PrefixACA {
		ACA := NewACA(sentence)
		if err := ACA.parse(); err != nil {
			return nil, err, -1
		}
		return ACA, nil, 1
	}

	if sentence.Format == PrefixACM {
		ACM := NewACM(sentence)
		if err := ACM.parse(); err != nil {
			return nil, err, -1
		}
		return ACM, nil, 1
	}

	if sentence.Format == PrefixADS {
		ADS := NewADS(sentence)
		if err := ADS.parse(); err != nil {
			return nil, err, -1
		}
		return ADS, nil, 1
	}

	if sentence.Format == PrefixAGA {
		AGA := NewAGA(sentence)
		if err := AGA.parse(); err != nil {
			return nil, err, -1
		}
		return AGA, nil, 1
	}

	if sentence.Format == PrefixAIR {
		AIR := NewAIR(sentence)
		if err := AIR.parse(); err != nil {
			return nil, err, -1
		}
		return AIR, nil, 1
	}

	if sentence.Format == PrefixALR {
		ALR := NewALR(sentence)
		if err := ALR.parse(); err != nil {
			return nil, err, -1
		}
		return ALR, nil, 1
	}

	if sentence.Format == PrefixASN {
		ASN := NewASN(sentence)
		if err := ASN.parse(); err != nil {
			return nil, err, -1
		}
		return ASN, nil, 1
	}

	if sentence.Format == PrefixBBM {
		BBM := NewBBM(sentence)
		if err := BBM.parse(); err != nil {
			return nil, err, -1
		}
		return BBM, nil, 1
	}

	if sentence.Format == PrefixBCG {
		BCG := NewBCG(sentence)
		if err := BCG.parse(); err != nil {
			return nil, err, -1
		}
		return BCG, nil, 1
	}

	if sentence.Format == PrefixBCL {
		BCL := NewBCL(sentence)
		if err := BCL.parse(); err != nil {
			return nil, err, -1
		}
		return BCL, nil, 1
	}

	if sentence.Format == PrefixDLM {
		DLM := NewDLM(sentence)
		if err := DLM.parse(); err != nil {
			return nil, err, -1
		}
		return DLM, nil, 1
	}

	if sentence.Format == PrefixECB {
		ECB := NewECB(sentence)
		if err := ECB.parse(); err != nil {
			return nil, err, -1
		}
		return ECB, nil, 1
	}

	if sentence.Format == PrefixFSR {
		FSR := NewFSR(sentence)
		if err := FSR.parse(); err != nil {
			return nil, err, -1
		}
		return FSR, nil, 1
	}

	if sentence.Format == PrefixGGA {
		GGA := NewGGA(sentence)
		if err := GGA.parse(); err != nil {
			return nil, err, -1
		}
		return GGA, nil, 1
	}

	if sentence.Format == PrefixGLL {
		GLL := NewGLL(sentence)
		if err := GLL.parse(); err != nil {
			return nil, err, -1
		}
		return GLL, nil, 1
	}

	if sentence.Format == PrefixNAK {
		NAK := NewNAK(sentence)
		if err := NAK.parse(); err != nil {
			return nil, err, -1
		}
		return NAK, nil, 1
	}

	if sentence.Format == PrefixOSD {
		OSD := NewOSD(sentence)
		if err := OSD.parse(); err != nil {
			return nil, err, -1
		}
		return OSD, nil, 1
	}

	if sentence.Format == PrefixRMC {
		RMC := NewRMC(sentence)
		if err := RMC.parse(); err != nil {
			return nil, err, -1
		}
		return RMC, nil, 1
	}

	if sentence.Format == PrefixRMB {
		RMB := NewRMB(sentence)
		if err := RMB.parse(); err != nil {
			return nil, err, -1
		}
		return RMB, nil, 1
	}

	if sentence.Format == PrefixRSD {
		RSD := NewRSD(sentence)
		if err := RSD.parse(); err != nil {
			return nil, err, -1
		}
		return RSD, nil, 1
	}

	if sentence.Format == PrefixRST {
		RST := NewRST(sentence)
		if err := RST.parse(); err != nil {
			return nil, err, -1
		}
		return RST, nil, 1
	}

	if sentence.Format == PrefixSID {
		SID := NewSID(sentence)
		if err := SID.parse(); err != nil {
			return nil, err, -1
		}
		return SID, nil, 1
	}

	if sentence.Format == PrefixSPO {
		SPO := NewSPO(sentence)
		if err := SPO.parse(); err != nil {
			return nil, err, -1
		}
		return SPO, nil, 1
	}

	if sentence.Format == PrefixTFR {
		TFR := NewTFR(sentence)
		if err := TFR.parse(); err != nil {
			return nil, err, -1
		}
		return TFR, nil, 1
	}

	if sentence.Format == PrefixTLL {
		TLL := NewTLL(sentence)
		if err := TLL.parse(); err != nil {
			return nil, err, -1
		}
		return TLL, nil, 1
	}

	if sentence.Format == PrefixTSA {
		TSA := NewTSA(sentence)
		if err := TSA.parse(); err != nil {
			return nil, err, -1
		}
		return TSA, nil, 1
	}

	if sentence.Format == PrefixTSP {
		TSP := NewTSP(sentence)
		if err := TSP.parse(); err != nil {
			return nil, err, -1
		}
		return TSP, nil, 1
	}

	if sentence.Format == PrefixTSR {
		TSR := NewTSR(sentence)
		if err := TSR.parse(); err != nil {
			return nil, err, -1
		}
		return TSR, nil, 1
	}

	if sentence.Format == PrefixTTM {
		TTM := NewTTM(sentence)
		if err := TTM.parse(); err != nil {
			return nil, err, -1
		}
		return TTM, nil, 1
	}

	if sentence.Format == PrefixTXT {
		TXT := NewTXT(sentence)
		if err := TXT.parse(); err != nil {
			return nil, err, -1
		}
		return TXT, nil, 1
	}

	if sentence.Format == PrefixVER {
		VER := NewVER(sentence)
		if err := VER.parse(); err != nil {
			return nil, err, -1
		}
		return VER, nil, 1
	}

	if sentence.Format == PrefixVSI {
		VSI := NewVSI(sentence)
		if err := VSI.parse(); err != nil {
			return nil, err, -1
		}
		return VSI, nil, 1
	}

	if sentence.Format == PrefixVTG {
		VTG := NewVTG(sentence)
		if err := VTG.parse(); err != nil {
			return nil, err, -1
		}
		return VTG, nil, 1
	}

	if sentence.Format == PrefixZDA {
		ZDA := NewZDA(sentence)
		if err := ZDA.parse(); err != nil {
			return nil, err, -1
		}
		return ZDA, nil, 1
	}

	if sentence.Format == PrefixQR {
		QR := NewQR(sentence)
		if err := QR.parse(); err != nil {
			return nil, err, -1
		}
		return QR, nil, 1
	}

	if sentence.Format == PrefixTC {
		TC := NewTC(sentence)
		if err := TC.parse(); err != nil {
			return nil, err, -1
		}
		return TC, nil, 1
	}

	if sentence.Format == PrefixPD {
		PD := NewPD(sentence)
		if err := PD.parse(); err != nil {
			return nil, err, -1
		}
		return PD, nil, 1
	}

	if sentence.Format == PrefixRPC {
		RPC := NewRPC(sentence)
		if err := RPC.parse(); err != nil {
			return nil, err, -1
		}
		return RPC, nil, 1
	}

	if sentence.Format == PrefixPR {
		PR := NewPR(sentence)
		if err := PR.parse(); err != nil {
			return nil, err, -1
		}
		return PR, nil, 1
	}

	if sentence.Format == PrefixDT {
		DT := NewDT(sentence)
		if err := DT.parse(); err != nil {
			return nil, err, -1
		}
		return DT, nil, 1
	}

	if sentence.Format == PrefixSHUTDOWN {
		SHUTDOWN := NewSHUTDOWN(sentence)
		if err := SHUTDOWN.parse(); err != nil {
			return nil, err, -1
		}
		return SHUTDOWN, nil, 1
	}

	if sentence.Format == PrefixPFA {
		PFA := NewPFA(sentence)
		if err := PFA.parse(); err != nil {
			return nil, err, -1
		}
		return PFA, nil, 1
	}

	if sentence.Format == PrefixPF {
		PF := NewPF(sentence)
		if err := PF.parse(); err != nil {
			return nil, err, -1
		}
		return PF, nil, 1
	}

	if sentence.Format == PrefixSU {
		SU := NewSU(sentence)
		if err := SU.parse(); err != nil {
			return nil, err, -1
		}
		return SU, nil, 1
	}

	if sentence.Format == PrefixRR {
		RR := NewRR(sentence)
		if err := RR.parse(); err != nil {
			return nil, err, -1
		}
		return RR, nil, 1
	}

	if sentence.Format == PrefixIT {
		IT := NewIT(sentence)
		if err := IT.parse(); err != nil {
			return nil, err, -1
		}
		return IT, nil, 1
	}

	if sentence.Format == PrefixST {
		ST := NewST(sentence)
		if err := ST.parse(); err != nil {
			return nil, err, -1
		}
		return ST, nil, 1
	}

	if sentence.Format == PrefixCT {
		CT := NewCT(sentence)
		if err := CT.parse(); err != nil {
			return nil, err, -1
		}
		return CT, nil, 1
	}

	if sentence.Format == PrefixTS {
		TS := NewTS(sentence)
		if err := TS.parse(); err != nil {
			return nil, err, -1
		}
		return TS, nil, 1
	}

	if sentence.Format == PrefixCVECEF {
		CVECEF := NewCVECEF(sentence)
		if err := CVECEF.parse(); err != nil {
			return nil, err, -1
		}
		return CVECEF, nil, 1
	}

	if sentence.Format == PrefixRS {
		RS := NewRS(sentence)
		if err := RS.parse(); err != nil {
			return nil, err, -1
		}
		return RS, nil, 1
	}

	if sentence.Format == PrefixVDO || sentence.Format == PrefixVDM {
		VD := NewVDMO(sentence)
		if err := VD.parse(); err != nil {
			return nil, err, -1
		}

		if VD.SentenceIndex != 1 {
			return nil, fmt.Errorf("error: sentence %s is missing its 1st part", VD.Raw), -1
		}

		if VD.SentenceCount >= 2 && VD.SentenceIndex == 1 {
			for i := 0; i < int(VD.SentenceCount); i++ {

				if len(s) == i {
					return nil, fmt.Errorf("error: index out of range. Parts of %s are missing", VD.Raw), -1
				}

				if err := sentence.parse(s[i]); err != nil {
					return nil, err, -1
				}
				VDX := NewVDMO(sentence)
				if err := VDX.parse(); err != nil {
					return nil, err, -1
				}

				if VDX.SentenceCount != VD.SentenceCount {
					return nil, fmt.Errorf("Sentence count should be %d in every sentence", VD.SentenceCount), -1
				}

				if int(VDX.SentenceIndex) != i+1 {
					return nil, fmt.Errorf("Sentence indeces are not coherent"), -1
				}

				if i != 0 {
					VD.EncapData = VD.EncapData + VDX.EncapData
					VD.Raw = VD.Raw + "---" + VDX.Raw
				}

			}
		}

		if MessageType(VD.EncapData) == 1 {
			M13711 := NewM13711(*VD)
			if err := M13711.parse(); err != nil {
				return nil, err, -1
			}
			return M13711, nil, int(VD.SentenceCount)
		}

		if MessageType(VD.EncapData) == 2 {
			M13712 := NewM13712(*VD)
			if err := M13712.parse(); err != nil {
				return nil, err, -1
			}
			return M13712, nil, int(VD.SentenceCount)
		}

		if MessageType(VD.EncapData) == 3 {
			M13713 := NewM13713(*VD)
			if err := M13713.parse(); err != nil {
				return nil, err, -1
			}
			return M13713, nil, int(VD.SentenceCount)
		}

		if MessageType(VD.EncapData) == 4 {
			M13714 := NewM13714(*VD)
			if err := M13714.parse(); err != nil {
				return nil, err, -1
			}
			return M13714, nil, int(VD.SentenceCount)
		}

		if MessageType(VD.EncapData) == 5 {
			M13715 := NewM13715(*VD)
			if err := M13715.parse(); err != nil {
				return nil, err, -1
			}
			return M13715, nil, int(VD.SentenceCount)
		}

		if MessageType(VD.EncapData) == 6 {
			M13716 := NewM13716(*VD)
			if err := M13716.parse(); err != nil {
				return nil, err, -1
			}
			return M13716, nil, int(VD.SentenceCount)
		}

		if MessageType(VD.EncapData) == 7 {
			M13717 := NewM13717(*VD)
			if err := M13717.parse(); err != nil {
				return nil, err, -1
			}
			return M13717, nil, int(VD.SentenceCount)
		}

		if MessageType(VD.EncapData) == 8 {
			M13718 := NewM13718(*VD)
			if err := M13718.parse(); err != nil {
				return nil, err, -1
			}
			return M13718, nil, int(VD.SentenceCount)
		}

		if MessageType(VD.EncapData) == 9 {
			M13719 := NewM13719(*VD)
			if err := M13719.parse(); err != nil {
				return nil, err, -1
			}
			return M13719, nil, int(VD.SentenceCount)
		}

		if MessageType(VD.EncapData) == 10 {
			M137110 := NewM137110(*VD)
			if err := M137110.parse(); err != nil {
				return nil, err, -1
			}
			return M137110, nil, int(VD.SentenceCount)
		}

		if MessageType(VD.EncapData) == 11 {
			M137111 := NewM137111(*VD)
			if err := M137111.parse(); err != nil {
				return nil, err, -1
			}
			return M137111, nil, int(VD.SentenceCount)
		}

		if MessageType(VD.EncapData) == 12 {
			M137112 := NewM137112(*VD)
			if err := M137112.parse(); err != nil {
				return nil, err, -1
			}
			return M137112, nil, int(VD.SentenceCount)
		}

		if MessageType(VD.EncapData) == 13 {
			M137113 := NewM137113(*VD)
			if err := M137113.parse(); err != nil {
				return nil, err, -1
			}
			return M137113, nil, int(VD.SentenceCount)
		}

		if MessageType(VD.EncapData) == 14 {
			M137114 := NewM137114(*VD)
			if err := M137114.parse(); err != nil {
				return nil, err, -1
			}
			return M137114, nil, int(VD.SentenceCount)
		}

		if MessageType(VD.EncapData) == 15 {
			M137115 := NewM137115(*VD)
			if err := M137115.parse(); err != nil {
				return nil, err, -1
			}
			return M137115, nil, int(VD.SentenceCount)
		}

		if MessageType(VD.EncapData) == 16 {
			M137116 := NewM137116(*VD)
			if err := M137116.parse(); err != nil {
				return nil, err, -1
			}
			return M137116, nil, int(VD.SentenceCount)
		}

		if MessageType(VD.EncapData) == 17 {
			M137117 := NewM137117(*VD)
			if err := M137117.parse(); err != nil {
				return nil, err, -1
			}
			return M137117, nil, int(VD.SentenceCount)
		}

		if MessageType(VD.EncapData) == 18 {
			M137118 := NewM137118(*VD)
			if err := M137118.parse(); err != nil {
				return nil, err, -1
			}
			return M137118, nil, int(VD.SentenceCount)
		}

		if MessageType(VD.EncapData) == 19 {
			M137119 := NewM137119(*VD)
			if err := M137119.parse(); err != nil {
				return nil, err, -1
			}
			return M137119, nil, int(VD.SentenceCount)
		}

		if MessageType(VD.EncapData) == 20 {
			M137120 := NewM137120(*VD)
			if err := M137120.parse(); err != nil {
				return nil, err, -1
			}
			return M137120, nil, int(VD.SentenceCount)
		}

		if MessageType(VD.EncapData) == 21 {
			M137121 := NewM137121(*VD)
			if err := M137121.parse(); err != nil {
				return nil, err, -1
			}
			return M137121, nil, int(VD.SentenceCount)
		}

		if MessageType(VD.EncapData) == 22 {
			M137122 := NewM137122(*VD)
			if err := M137122.parse(); err != nil {
				return nil, err, -1
			}
			return M137122, nil, int(VD.SentenceCount)
		}

		if MessageType(VD.EncapData) == 23 {
			M137123 := NewM137123(*VD)
			if err := M137123.parse(); err != nil {
				return nil, err, -1
			}
			return M137123, nil, int(VD.SentenceCount)
		}

		if MessageType(VD.EncapData) == 24 && BitsToInt(38, 39, []byte(VD.EncapData)) == 0 {
			M137124A := NewM137124A(*VD)
			if err := M137124A.parse(); err != nil {
				return nil, err, -1
			}
			return M137124A, nil, int(VD.SentenceCount)
		}

		if MessageType(VD.EncapData) == 24 && BitsToInt(38, 39, []byte(VD.EncapData)) == 1 {
			M137124B := NewM137124B(*VD)
			if err := M137124B.parse(); err != nil {
				return nil, err, -1
			}
			return M137124B, nil, int(VD.SentenceCount)
		}

		if MessageType(VD.EncapData) == 25 {
			M137125 := NewM137125(*VD)
			if err := M137125.parse(); err != nil {
				return nil, err, -1
			}
			return M137125, nil, int(VD.SentenceCount)
		}

		if MessageType(VD.EncapData) == 26 {
			M137126 := NewM137126(*VD)
			if err := M137126.parse(); err != nil {
				return nil, err, -1
			}
			return M137126, nil, int(VD.SentenceCount)
		}

		if MessageType(VD.EncapData) == 27 {
			M137127 := NewM137127(*VD)
			if err := M137127.parse(); err != nil {
				return nil, err, -1
			}
			return M137127, nil, int(VD.SentenceCount)
		}

		return VD, nil, 0
	}
	err := fmt.Errorf("Sentence type '%s%s%s' not implemented", sentence.SOS, sentence.Talker, sentence.Format)
	return nil, err, -1
}
func Parse(s string) (Sentence, error) {
	var str = []string{s}
	Sen, err, _ := ParseArray(str)
	return Sen, err
}
