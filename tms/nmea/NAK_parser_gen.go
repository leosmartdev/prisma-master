// Code generated by parse_nmea; DO NOT EDIT
package nmea

import "fmt"
import "strings"
import "strconv"

const (
	// PrefixNAK prefix
	PrefixNAK = "NAK"
)

// NAK represents fix data.
type CoreNAK struct {
	ReplyTalker string

	ReplyTalkerValidity bool

	ReplyFormat string

	ReplyFormatValidity bool

	DeviceID string

	DeviceIDValidity bool

	AckCode uint32

	AckCodeValidity bool

	AckDesc string

	AckDescValidity bool
}

type NAK struct {
	BaseSentence
	CoreNAK
}

func NewNAK(sentence BaseSentence) *NAK {
	s := new(NAK)
	s.BaseSentence = sentence

	s.ReplyTalkerValidity = false

	s.ReplyFormatValidity = false

	s.DeviceIDValidity = false

	s.AckCodeValidity = false

	s.AckDescValidity = false

	return s
}

func (s *NAK) parse() error {
	var err error

	if s.Format != PrefixNAK {
		err = fmt.Errorf("%s is not a %s", s.Format, PrefixNAK)
		return err
	}

	if len(s.Fields) == 0 {
		return nil
	} else {
		if s.Fields[0] != "" {
			s.ReplyTalker = s.Fields[0]
			s.ReplyTalkerValidity = true
		}
	}

	if len(s.Fields) == 1 {
		return nil
	} else {
		if s.Fields[1] != "" {
			s.ReplyFormat = s.Fields[1]
			s.ReplyFormatValidity = true
		}
	}

	if len(s.Fields) == 2 {
		return nil
	} else {
		if s.Fields[2] != "" {
			s.DeviceID = s.Fields[2]
			s.DeviceIDValidity = true
		}
	}

	if len(s.Fields) == 3 {
		return nil
	} else {
		if s.Fields[3] != "" {
			i, err := strconv.ParseUint(s.Fields[3], 10, 32)
			if err != nil {
				return fmt.Errorf("NAK decode variation error: %s", s.Fields[3])
			} else {
				s.CoreNAK.AckCode = uint32(i)
				s.CoreNAK.AckCodeValidity = true
			}

		}
	}

	if len(s.Fields) == 4 {
		return nil
	} else {
		if s.Fields[4] != "" {
			s.AckDesc = s.Fields[4]
			s.AckDescValidity = true
		}
	}

	return nil
}

func (s *NAK) Encode() (string, error) {
	var Raw string

	if s.Format != PrefixNAK {
		err := fmt.Errorf("Sentence format %s is not a NAK sentence", s.Format)
		return "", err
	}

	Raw = s.SOS + s.Talker + s.Format

	if s.ReplyTalkerValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreNAK.ReplyTalker

		} else {
			Raw = Raw + "," + s.CoreNAK.ReplyTalker
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.ReplyFormatValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreNAK.ReplyFormat

		} else {
			Raw = Raw + "," + s.CoreNAK.ReplyFormat
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.DeviceIDValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreNAK.DeviceID

		} else {
			Raw = Raw + "," + s.CoreNAK.DeviceID
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.AckCodeValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreNAK.AckCode), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreNAK.AckCode), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.AckDescValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + s.CoreNAK.AckDesc

		} else {
			Raw = Raw + "," + s.CoreNAK.AckDesc
		}
	}

	check := Checksum(Raw)

	Raw = Raw + check

	return Raw, nil

}
