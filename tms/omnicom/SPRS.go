//Single Position report Solar (0x0a), Iridium/3G/RPMA
// Code generated by omnicom; DO NOT EDIT
package omnicom

import (
	"errors"
	"strconv"
)

type SPRS struct {
	Header            byte
	Date_Position     Date_Position
	Move              Move
	Period            uint32
	BatteryVoltage    float32
	SolarPanelVoltage uint32
	BatteryCapacity   uint32
	Padding           uint32
	CRC               uint32
}

func (SPRS *SPRS) Parse(input string) error {
	var err error
	if len(input) > 136 {
		err = errors.New("Input message is longer than limit")
		return err
	}
	var count int = 0
	if count+8 > len(input) {
		err = errors.New("Input message length of SPRS is shorter than required")
		return err
	}
	count = count + 8
	if count+70 > len(input) {
		err = errors.New("Input message length of SPRS is shorter than required")
		return err
	}
	SPRS.Date_Position = *new(Date_Position)
	err = SPRS.Date_Position.parse(input[count : count+70])
	count = count + 70
	if err != nil {
		return err
	}
	if count+18 > len(input) {
		err = errors.New("Input message length of SPRS is shorter than required")
		return err
	}
	SPRS.Move = *new(Move)
	err = SPRS.Move.parse(input[count : count+18])
	count = count + 18
	if err != nil {
		return err
	}
	var num uint64
	if count+9 > len(input) {
		err = errors.New("Input message length of SPRS is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+9], 2, 32)
	SPRS.Period = uint32(num*1 - 0)
	count = count + 9
	if err != nil {
		return err
	}
	if count+7 > len(input) {
		err = errors.New("Input message length of SPRS is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+7], 2, 32)
	SPRS.BatteryVoltage = float32(num)*float32(0.1) - float32(0)
	count = count + 7
	if err != nil {
		return err
	}
	if count+7 > len(input) {
		err = errors.New("Input message length of SPRS is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+7], 2, 32)
	SPRS.SolarPanelVoltage = uint32(num*1 - 0)
	count = count + 7
	if err != nil {
		return err
	}
	if count+7 > len(input) {
		err = errors.New("Input message length of SPRS is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+7], 2, 32)
	SPRS.BatteryCapacity = uint32(num*1 - 0)
	count = count + 7
	if err != nil {
		return err
	}
	if count+(8-count%8) > len(input) {
		err = errors.New("Input message length of SPRS is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+(8-count%8)], 2, 32)
	SPRS.Padding = uint32(num*1 - 0)
	count = count + (8 - count%8)
	if err != nil {
		return err
	}
	if count+8 > len(input) {
		err = errors.New("Input message length of SPRS is shorter than required")
		return err
	}
	num, err = strconv.ParseUint(input[count:count+8], 2, 32)
	SPRS.CRC = uint32(num*1 - 0)
	count = count + 8
	if err != nil {
		return err
	}
	return err
}
func (SPRS *SPRS) Encode() ([]byte, error) {
	var str string
	var s string
	var err error
	str += pad(strconv.FormatUint(uint64(SPRS.Header), 2), 8)
	s, err = SPRS.Date_Position.encode()
	if err != nil {
		return []byte{}, err
	}
	str += s

	s, err = SPRS.Move.encode()
	if err != nil {
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((SPRS.Period+0)/1), 2), 9)
	if len(s) > 9 {
		err = errors.New("Value assigned for SPRS.Period exceeds limit")
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((SPRS.BatteryVoltage+0)/0.1), 2), 7)
	if len(s) > 7 {
		err = errors.New("Value assigned for SPRS.BatteryVoltage exceeds limit")
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((SPRS.SolarPanelVoltage+0)/1), 2), 7)
	if len(s) > 7 {
		err = errors.New("Value assigned for SPRS.SolarPanelVoltage exceeds limit")
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((SPRS.BatteryCapacity+0)/1), 2), 7)
	if len(s) > 7 {
		err = errors.New("Value assigned for SPRS.BatteryCapacity exceeds limit")
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((SPRS.Padding+0)/1), 2), 8-len(str)%8)
	if len(s) > (8 - len(str)%8) {
		err = errors.New("Value assigned for SPRS.Padding exceeds limit")
		return []byte{}, err
	}
	str += s

	s = pad(strconv.FormatUint(uint64((SPRS.CRC+0)/1), 2), 8)
	if len(s) > 8 {
		err = errors.New("Value assigned for SPRS.CRC exceeds limit")
		return []byte{}, err
	}
	str += s

	str = attachCRC(str)
	byteList, err := decToByte(str)
	return byteList, err
}
func (SPRS *SPRS) getHeader() byte {
	return SPRS.Header
}
func (SPRS *SPRS) getCRC() uint32 {
	return SPRS.CRC
}
func (SPRS *SPRS) setCRC(crc uint32) {
	SPRS.CRC = crc
}
