// Code generated by parse_nmea; DO NOT EDIT
package nmea

import "fmt"
import "strings"
import "strconv"

const (
	// PrefixZDA prefix
	PrefixZDA = "ZDA"
)

// ZDA represents fix data.
type CoreZDA struct {
	UtcTime float64

	UtcTimeValidity bool

	Day uint32

	DayValidity bool

	Month uint32

	MonthValidity bool

	Year uint32

	YearValidity bool

	LocalZoneHours int32

	LocalZoneHoursValidity bool

	LocalZoneMinutes uint32

	LocalZoneMinutesValidity bool
}

type ZDA struct {
	BaseSentence
	CoreZDA
}

func NewZDA(sentence BaseSentence) *ZDA {
	s := new(ZDA)
	s.BaseSentence = sentence

	s.UtcTimeValidity = false

	s.DayValidity = false

	s.MonthValidity = false

	s.YearValidity = false

	s.LocalZoneHoursValidity = false

	s.LocalZoneMinutesValidity = false

	return s
}

func (s *ZDA) parse() error {
	var err error

	if s.Format != PrefixZDA {
		err = fmt.Errorf("%s is not a %s", s.Format, PrefixZDA)
		return err
	}

	if len(s.Fields) == 0 {
		return nil
	} else {
		if s.Fields[0] != "" {
			i, err := strconv.ParseFloat(s.Fields[0], 64)
			if err != nil {
				return fmt.Errorf("ZDA decode variation error: %s", s.Fields[0])
			} else {
				s.CoreZDA.UtcTime = float64(i)
				s.CoreZDA.UtcTimeValidity = true
			}

		}
	}

	if len(s.Fields) == 1 {
		return nil
	} else {
		if s.Fields[1] != "" {
			i, err := strconv.ParseUint(s.Fields[1], 10, 32)
			if err != nil {
				return fmt.Errorf("ZDA decode variation error: %s", s.Fields[1])
			} else {
				s.CoreZDA.Day = uint32(i)
				s.CoreZDA.DayValidity = true
			}

		}
	}

	if len(s.Fields) == 2 {
		return nil
	} else {
		if s.Fields[2] != "" {
			i, err := strconv.ParseUint(s.Fields[2], 10, 32)
			if err != nil {
				return fmt.Errorf("ZDA decode variation error: %s", s.Fields[2])
			} else {
				s.CoreZDA.Month = uint32(i)
				s.CoreZDA.MonthValidity = true
			}

		}
	}

	if len(s.Fields) == 3 {
		return nil
	} else {
		if s.Fields[3] != "" {
			i, err := strconv.ParseUint(s.Fields[3], 10, 32)
			if err != nil {
				return fmt.Errorf("ZDA decode variation error: %s", s.Fields[3])
			} else {
				s.CoreZDA.Year = uint32(i)
				s.CoreZDA.YearValidity = true
			}

		}
	}

	if len(s.Fields) == 4 {
		return nil
	} else {
		if s.Fields[4] != "" {
			i, err := strconv.ParseInt(s.Fields[4], 10, 32)
			if err != nil {
				return fmt.Errorf("ZDA decode variation error: %s", s.Fields[4])
			} else {
				s.CoreZDA.LocalZoneHours = int32(i)
				s.CoreZDA.LocalZoneHoursValidity = true
			}

		}
	}

	if len(s.Fields) == 5 {
		return nil
	} else {
		if s.Fields[5] != "" {
			i, err := strconv.ParseUint(s.Fields[5], 10, 32)
			if err != nil {
				return fmt.Errorf("ZDA decode variation error: %s", s.Fields[5])
			} else {
				s.CoreZDA.LocalZoneMinutes = uint32(i)
				s.CoreZDA.LocalZoneMinutesValidity = true
			}

		}
	}

	return nil
}

func (s *ZDA) Encode() (string, error) {
	var Raw string

	if s.Format != PrefixZDA {
		err := fmt.Errorf("Sentence format %s is not a ZDA sentence", s.Format)
		return "", err
	}

	Raw = s.SOS + s.Talker + s.Format

	if s.UtcTimeValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatFloat(s.CoreZDA.UtcTime, 'f', -1, 64)

		} else {
			Raw = Raw + "," + strconv.FormatFloat(s.CoreZDA.UtcTime, 'f', -1, 64)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.DayValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreZDA.Day), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreZDA.Day), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.MonthValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreZDA.Month), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreZDA.Month), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.YearValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreZDA.Year), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreZDA.Year), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.LocalZoneHoursValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + strconv.FormatInt(int64(s.CoreZDA.LocalZoneHours), 10)

		} else {
			Raw = Raw + "," + strconv.FormatInt(int64(s.CoreZDA.LocalZoneHours), 10)
		}

	} else if len(Raw) > len(strings.TrimSuffix(Raw, ",,")) {
		Raw = Raw + ","
	} else {
		Raw = Raw + ",,"
	}

	if s.LocalZoneMinutesValidity == true {

		if len(Raw) > len(strings.TrimSuffix(Raw, ",")) {

			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreZDA.LocalZoneMinutes), 10)

		} else {
			Raw = Raw + "," + strconv.FormatUint(uint64(s.CoreZDA.LocalZoneMinutes), 10)
		}

	}

	check := Checksum(Raw)

	Raw = Raw + check

	return Raw, nil

}
